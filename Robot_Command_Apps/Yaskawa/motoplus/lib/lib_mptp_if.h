/***********************************************************

Copyright 2018 - 2023 speedbot All Rights reserved.

 file Name: lib_tp_if.h

 Description:
   Language             ==   motoplus for Yaskawa ROBOT
   Date                 ==   2021 - 09 - 03
   Modification Data    ==   2021 - 09 - 18

 Author: speedbot

 Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--  
*/ 
#ifndef __SBT_MPTP_IF_H__
#define __SBT_MPTP_IF_H__

#include "operating_environment.h"

#define CUR_ACT_TOOL_NO     (-1)

//***********************************************************
// func delay_()
//***********************************************************
//        in : Msec         * INT32 *           * 指定休眠的时间 *
//    return : 			    * STATUS * 		    * 始终返回 0 *
//***********************************************************
//  将一个任务休眠指定的时间，单位是 ms
//***********************************************************	
IMPORT STATUS delay_(IN UINT32 Msec); 

//***********************************************************
// func get_variable_byte_()
//***********************************************************
//        in : Index        * USHORT *              * 寄存器编号 *
//    return : 			    * UCHAR * 		        * 返回存储在寄存器中的值 *
//***********************************************************
//  返回示教器中指定 B 变量的值
//***********************************************************	
IMPORT UCHAR get_variable_byte_(IN USHORT Index);   

//***********************************************************
// func get_variable_int16_()
//***********************************************************
//        in : Index        * USHORT *              * 寄存器编号 *
//    return : 			    * SHORT * 		        * 返回存储在寄存器中的值 *
//***********************************************************
//  返回示教器中指定 I 变量的值
//***********************************************************	
IMPORT SHORT get_variable_int16_(IN USHORT Index);

//***********************************************************
// func get_variable_long_()
//***********************************************************
//        in : Index        * USHORT *              * 寄存器编号 *
//    return : 			    * SHORT * 		        * 返回存储在寄存器中的值 *
//***********************************************************
//  返回示教器中指定 D 变量的值
//***********************************************************	
IMPORT LONG get_variable_long_(IN USHORT Index);

//***********************************************************
// func get_variable_float_()
//***********************************************************
//        in : Index        * USHORT *              * 寄存器编号 *
//    return : 			    * SHORT * 		        * 返回存储在寄存器中的值 *
//***********************************************************
//  返回示教器中指定 R 变量的值
//***********************************************************	
IMPORT FLOAT get_variable_float_(IN USHORT Index);

//***********************************************************
// func get_variable_string_()
//***********************************************************
//        in : Index                    * USHORT *              * 寄存器编号 *
//       out : StringValue[STR_VAR_SIZE + 1]    * char *                * 返回的字符串值 *
//    return : 			                * STATUS * 		        * [=0 == 执行成功] *
//***********************************************************
//  获取示教器中指定 S 变量的值
//***********************************************************	
IMPORT STATUS get_variable_string_(IN USHORT Index, OUT CHAR StringValue[STR_VAR_SIZE + 1]);

//***********************************************************
// func get_variable_robot_pos_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : *PositionValue      * MP_P_VAR_BUFF *    * 返回的位置型值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  获取示教器中指定 P 变量的值
// [MP_PULSE_DTYPE == 0x00] / [MP_BASE_DTYPE == 0x10] / [MP_ROBO_DTYPE == 0x11]
// [MP_TOOL_DTYPE == 0x12] / [MP_USER_DTYPE == 0x13] / [MP_MTOOL_DTYPE == 0x14]
//***********************************************************	
IMPORT STATUS get_variable_robot_position_(IN USHORT Index, OUT MP_P_VAR_BUFF* PositionValue);

//***********************************************************
// func get_variable_base_pos_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : *PositionValue      * MP_P_VAR_BUFF *    * 返回的位置型值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  获取示教器中指定 BP 变量的值
// [MP_PULSE_DTYPE == 0x00] / [MP_BASE_DTYPE == 0x10] / [MP_ROBO_DTYPE == 0x11]
// [MP_TOOL_DTYPE == 0x12] / [MP_USER_DTYPE == 0x13] / [MP_MTOOL_DTYPE == 0x14]
//***********************************************************	
IMPORT STATUS get_variable_base_position_(IN USHORT Index, OUT MP_P_VAR_BUFF* PositionValue);

//***********************************************************
// func get_io_value_()
//***********************************************************
//        in : Index        * UINT32 *           * IO 地址 *
//    return : 			    * USHORT * 		     * TRUE / FALSE *
//***********************************************************
//  获取示教器中指定 IO 地址的值
// 10 ～ 5127 通用输入 #00010 ～ #05127(4096 个) / 10010 ～ 15127 通用输出 #10010 ～ #15127(4096 个)
// 20010 ～ 25127 外部输入 #20010 ～ #25127(4096 个) / 30010 ～ 35127 外部输出 #30010 ～ #35127(4096 个)
// 40010 ～ 41607 专用输入 #40010 ～ #41607(1280 个) / 50010 ～ 53007 专用输出 #50010 ～ #53007(2400 个)
// 60010 ～ 60647 I/F 操作界面#60010 ～ #60647(512 个) / 70010 ～ 79997 辅助继电器#70010 ～ #79997(7992 个)
// 80010 ～ 80647 控制输入 #80010 ～ #80647( 512 个) / 82010 ～ 82207 模拟输入 #82010 ～ #82207( 160 个)
// 27010 ～ 29567 网络输入 #27010 ～ #29567(2048 个) / 37010 ～ 39567 网络输出 #37010 ～ #39567(2048 个)
// 1000000 ～ 1000559 寄存器 #1000000 ～ #1000559(560 个)
//***********************************************************	
IMPORT USHORT get_io_value_(IN UINT32 Index);

//***********************************************************
// func is_alarm_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回示教器是否存在 ALARM
//***********************************************************	
IMPORT BOOL is_alarm_();

//***********************************************************
// func is_error_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回示教器是否存在 ERROR
//***********************************************************	
IMPORT BOOL is_error_();

//***********************************************************
// func is_emergency_Stop_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回示教器是否存在急停
//***********************************************************	
IMPORT BOOL is_emergency_Stop_(); 

//***********************************************************
// func is_servo_power_on_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回是否已经激活伺服
//***********************************************************	
IMPORT BOOL is_servo_power_on_(); 

//***********************************************************
// func is_remote_mode_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回是否是 REMOTE 模式
//***********************************************************	
IMPORT BOOL is_remote_mode_();

//***********************************************************
// func is_play_mode_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回是否是 PLAY 模式
//***********************************************************	
IMPORT BOOL is_play_mode_(); 

//***********************************************************
// func is_teach_mode_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  返回是否是 TEACH 模式
//***********************************************************	
IMPORT BOOL is_teach_mode_(); 

//***********************************************************
// func set_variable_byte_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : Value        * UCHAR *            * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 BP 变量的值
//***********************************************************	
IMPORT STATUS set_variable_byte_(IN const USHORT Index, IN const UCHAR Value);

//***********************************************************
// func set_variable_int16_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : Value        * SHORT *            * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 I 变量的值
//***********************************************************	
IMPORT STATUS set_variable_int16_(IN const USHORT Index, IN const SHORT Value);

//***********************************************************
// func set_variable_long_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : Value        * INT32 *            * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 D 变量的值
//***********************************************************	
IMPORT STATUS set_variable_long_(IN const USHORT Index, IN const INT32 Value);

//***********************************************************
// func set_variable_float_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : Value        * FLOAT *            * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 R 变量的值
//***********************************************************	
IMPORT STATUS set_variable_float_(IN USHORT Index, IN FLOAT Value);

//***********************************************************
// func set_variable_string_()
//***********************************************************
//        in : Index                        * int *              * 寄存器编号 *
//       out : StringValue[STR_VAR_SIZE + 1]        * CHAR *    * 需要设置的值 *
//    return : 			                    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 S 变量的值
//***********************************************************	
IMPORT STATUS set_variable_string_(IN USHORT Index, IN const CHAR StringValue[STR_VAR_SIZE + 1]);

//***********************************************************
// func set_variable_robot_pos_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : PositionValue       * MP_P_VAR_BUFF *    * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 P 变量的值
// [MP_PULSE_DTYPE == 0x00] / [MP_BASE_DTYPE == 0x10] / [MP_ROBO_DTYPE == 0x11]
// [MP_TOOL_DTYPE == 0x12] / [MP_USER_DTYPE == 0x13] / [MP_MTOOL_DTYPE == 0x14]
//***********************************************************	
IMPORT STATUS set_variable_robot_position_(IN USHORT Index, IN MP_P_VAR_BUFF PositionValue);

IMPORT STATUS set_variable_robot_type_xyzrpy_(IN USHORT Index, IN INT32 ToolNo, IN MP_COORD PositionValue);

IMPORT STATUS set_variable_base_type_xyzrpy_(IN USHORT Index, IN INT32 ToolNo, IN MP_COORD PositionValue);

//***********************************************************
// func set_variable_base_pos_()
//***********************************************************
//        in : Index        * USHORT *           * 寄存器编号 *
//       out : PositionValue       * MP_P_VAR_BUFF *    * 需要设置的值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 BP 变量的值
// [MP_PULSE_DTYPE == 0x00] / [MP_BASE_DTYPE == 0x10] / [MP_ROBO_DTYPE == 0x11]
// [MP_TOOL_DTYPE == 0x12] / [MP_USER_DTYPE == 0x13] / [MP_MTOOL_DTYPE == 0x14]
//***********************************************************	
IMPORT STATUS set_variable_base_position_(IN USHORT Index, IN MP_P_VAR_BUFF PositionValue);

//***********************************************************
// func set_io_value_()
//***********************************************************
//        in : Index        * UINT32 *           * IO 地址 *
//        in : Signal       * USHORT *           * IO 值 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  设置示教器中指定 IO 地址的值
// 10010 ～ 15127 通用输出 #10010 ～ #15127(4096 个)
// 60010 ～ 60647 I/F 操作界面#60010 ～ #60647(512 个) 
// 27010 ～ 29567 网络输入 #27010 ～ #29567(2048 个) 
// 1000000 ～ 1000559 寄存器 #1000000 ～ #1000559(560 个)
//***********************************************************	
IMPORT STATUS set_io_value_(IN UINT32 Index, IN USHORT Signal);

//***********************************************************
// func pulse_io_()
//***********************************************************
//        in : Index        * UINT32 *           * IO 地址 *
//        in : PulseTime       * UINT32 *        * 脉冲时间 *
//    return : 			    * STATUS * 		     * 始终返回 0 *
//***********************************************************
//  以上升沿的形式输出指定 IO 地址的脉冲，脉冲时间为 ms 单位
// 10010 ～ 15127 通用输出 #10010 ～ #15127(4096 个)
// 60010 ～ 60647 I/F 操作界面#60010 ～ #60647(512 个) 
// 27010 ～ 29567 网络输入 #27010 ～ #29567(2048 个) 
// 1000000 ～ 1000559 寄存器 #1000000 ～ #1000559(560 个)
//***********************************************************	
IMPORT STATUS pulse_io_(IN UINT32 Index, IN UINT32 PulseTime);

//***********************************************************
// func alarm_reset_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  复位示教器存在的 ALARM ， 并且返回复位执行状态
//***********************************************************	
IMPORT BOOL alarm_reset_();

//***********************************************************
// func servo_power_on_()
//***********************************************************
//    return : 			    * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  激活伺服使能 ， 并且返回激活执行状态
//***********************************************************	
IMPORT BOOL servo_power_on_(); 

//***********************************************************
// func is_running_()
//***********************************************************
//        in : TaskId        * INT32 *           * 任务 ID *
//    return : 			     * BOOL * 		     * TRUE / FALSE *
//***********************************************************
//  检查主程序是否在运行
//  可以指定 TASK ID 检查 ，也就是信号表中的程序号
//  也可以指定 TASK ID 为 (int)NULL , 这代表只要有示教器程序在运行就返回 TRUE
//***********************************************************	
IMPORT BOOL is_running_(IN INT32 TaskId);

//***********************************************************
// func get_alarm_code_()
//***********************************************************
//    return : 			    * INT32 * 		     * ALARM 代码 *
//***********************************************************
//  返回已经发生的 ALARM 代码
//***********************************************************	
IMPORT INT32 get_alarm_code_();

//***********************************************************
// func io_list_display_()
//***********************************************************
//   IoAddrs :              * USHORT *          * IO 起始地址 *
//      Size :              * USHORT *          * IO 字节数量 *
//   IoValue :              * UINT8 *           * IO 值 *
//    return : 			    * STATUS * 		    * 始终返回 0 *
//***********************************************************
//  指定 IO 地址，指定字节大小读取 IO 信息，存储到 IoValue 中
//***********************************************************	
IMPORT STATUS io_list_display_(IN USHORT IoAddrs, IN USHORT Size, OUT UINT8 IoValue[]);

//***********************************************************
// func io_list_setup_()
//***********************************************************
//   IoAddrs :              * USHORT *          * IO 起始地址 *
//      Size :              * USHORT *          * IO 字节数量 *
//   IoValue :              * UINT8 *           * IO 值 *
//    return : 			    * STATUS * 		    * 始终返回 0 *
//***********************************************************
//  指定 IO 地址，指定字节大小设置 IO 信息，需要设置的 IO 值存储在 IoValue 中
// 10010 ～ 15127 通用输出 #10010 ～ #15127(4096 个)
// 60010 ～ 60647 I/F 操作界面#60010 ～ #60647(512 个) 
// 27010 ～ 29567 网络输入 #27010 ～ #29567(2048 个) 
// 1000000 ～ 1000559 寄存器 #1000000 ～ #1000559(560 个)
//***********************************************************	
IMPORT STATUS io_list_setup_(IN USHORT IoAddrs, IN USHORT Size, IN const UINT8 IoValue[]);
#endif
