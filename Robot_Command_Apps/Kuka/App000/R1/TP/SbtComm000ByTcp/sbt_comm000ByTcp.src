&ACCESS RP
&comment CalibByTcp 2500619
def sbt_comm000ByTcp()
;***********************************************************
;
; file Name: sbt_comm000ByTcp.src
;
; Copyright 2018 - 2025 speedbot All Rights reserved.
;
;
; Description:
;   Language             ==   KRL for KUKA ROBOT
;   Date                 ==   2024 - 06 - 03
;   Modification Data    ==   2025 - 01 - 21
;
; Author: speedbot
;
; Version: 1.0
;***********************************************************
end

global def sbt_comm000_(Command : in, TrajeNo :in)
    decl int Command
    decl char TrajeNo

    switch (Command)
    case 1                                 ; Calib Start                                 

        tcp_init_(BusInput, BusOutput, Comm000SockCfg)

        Count = 0

        CommType01.Byte01 = 1
        CommType01.Byte02 = TrajeNo

        CommType01.Short03 = 0
        CommType01.Short04 = 0
        
        CommType01.Int05 = 0
        CommType01.Int06 = 0

        CommType01.Float07 = 0.0
        CommType01.Float08 = 0.0

        Status = tcp_cmd002_(#PACKCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CommType01)
        Status = tcp_cmd001_(#PACKCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

        if Status <> OK then

            err_display_(BusInput, Comm000SockCfg, Status)
        endif

        return

    case 2                                  ; Calib Picture                   

        wait sec 0.0

        Count = Count + 1

        CurPos = cur_pos_(0, 0)

        Status = tcp_cmd003_(#PACKCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CurPos)
        Status = tcp_cmd001_(#PACKCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

        if Status <> OK then
            
            err_display_(BusInput, Comm000SockCfg, Status)
        endif

        return
    case 3                                   ; Calib End   

        CommType01.Byte01 = 2

        Status = tcp_cmd002_(#PACKCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CommType01)
        Status = tcp_cmd001_(#PACKCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

        if Status <> OK then
            
            err_display_(BusInput, Comm000SockCfg, Status)
        endif

        return

    default

        error_write_(999, "Calibration Param Err")
    endswitch

end

def err_display_(BusIn : in, SockCfg : in, Status : in)
    decl busin_t BusIn
    decl sock_cfg_t SockCfg
    decl int Status

    continue
    if not $flag[SockCfg.ActFlagNo] then 

        error_write_(901, "No connection to the software.")
        return
    endif

    if Status == -282 then 

        error_write_(902, "Software processing timeout.")
        return
    endif

    switch BusIn.ErrorId 
    case 1
        warn_write_(001, "An issue has been detected with the data format.")
    case 2
        warn_write_(002, "The camera failed to operate.")
    case 3
        warn_write_(003, "There was a failure in the photo capture detection process.")
    default
        error_write_(903, "Unknow error")
    endswitch

end