&access rvo
def sbt_comm005()
;***********************************************************
;
; file Name: sbt_comm005
;
; Description:
;   Language             ==   KRL for KUKA ROBOT
;   Date                 ==   2024 - 05 - 17
;   Modification Data    ==   2024 - 05 - 30
;
; Author: speedbot
;
; Version: 1.0
;***********************************************************
end

global def sbt_comm005_(Command : in, Pid : in,PictureId :in) 
    decl int Command
    decl char Pid
    decl int PictureId

    while true

        switch (Command)
        case 1                                                            ;#CMD_VPARAM
            bus_init_(BusInput, BusOutput, 0, PTC_GEN_CMD)
            
            ;FOLD PID & VIN
            if (varstate("Pid") == #initialized) then
                CmdType03.Byte01 = Pid
            else
                CmdType03.Byte01 = 0
            endif
                
                CmdType03.Byte02 = 0    
                CmdType03.Byte03 = 0
                CmdType03.Byte04 = 0
                CmdType03.Byte05 = 0
                CmdType03.Byte06 = 0
                CmdType03.Byte07 = 0
                CmdType03.Byte08 = 0
                CmdType03.Byte09 = 0
                CmdType03.Byte10 = 0
                CmdType03.Byte11 = 0
                CmdType03.Byte12 = 0
                CmdType03.Byte13 = 0
                CmdType03.Byte14 = 0 
                CmdType03.Byte15 = 0 
                CmdType03.Byte16 = 0
                CmdType03.Byte17 = 0
                CmdType03.Byte18 = 0    
            ;ENDFOLD
       
            CmdType01 = {Byte01 0, Byte02 0, Short03 0, Short04 0, Int05 0, Int06 0, Float07 0.0, Float08 0.0}
        
            ;Count = 0
    
            Res = bus_cmd137_(#BUSCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CmdType03)
            Res = bus_cmd001_(#BUSCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

            if  Res == OK then

                return
            else
                err_display_(BusInput, BusOutput)
            endif

        case 2                                                            ;#CMD_PICTURE
    
            wait sec 0.0
  
            ;Count = Count + 1

            if (varstate("PictureId") == #initialized) then
                
                BusOutput.RobotId = PictureId
            else 
                
                BusOutput.RobotId = 0
            endif
    
            CurPos = cur_pos_(0, 0)
    
            Res = bus_cmd009_(#BUSCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CurPos)
            Res = bus_cmd001_(#BUSCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

            if  Res == OK then

            else
                err_display_(BusInput, BusOutput)
            endif
            return
    
        case 3                                                            ;#CMD_END
    
            Res = bus_cmd012_(#BUSCMD_WRITE, #BUSCMD_MST, BusInput, BusOutput, CmdType01)
            Res = bus_cmd001_(#BUSCMD_READ, #BUSCMD_MST, BusInput, BusOutput, BusTimeout)

            if  Res == OK then

            else

                err_display_(BusInput, BusOutput)
            endif
            return
        default

            error_write_(999,"Calibration Param Err")

        endswitch

    endwhile

end

def err_display_(BusIn : in,BusOut : in)
    
    decl busin_t BusIn
    decl busout_t BusOut

    if not BusIn.SysReady then 

        error_write_(901,"Software not ready")
        return
    endif

    if BusIn.TellId <> BusOut.RobTellId then 

        error_write_(902,"Software processing timeout")
        return
    endif

    switch BusIn.ErrorId 
    case 1
        warn_write_(001,"error")
    case 2
        warn_write_(002,"error")
    case 3
        warn_write_(003,"error")

    default
        error_write_(903,"Unknow error")
    endswitch

end
