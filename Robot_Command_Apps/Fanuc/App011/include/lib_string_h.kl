--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_string_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2021 - 08 - 16
--   Modification Data    ==   2023 - 03 - 12
--
-- Author: speedbot
--
-- Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
--***********************************************************
-- func str_find_()
--***********************************************************
--		in : InStr				* string *		* 需要被查找的字符串 *
--		in : FindStr			* string *		* 需要查找的字符 *
--	return : 					* integer *		* 返回位置 （为0则表示查找失败）*
--***********************************************************	
-- 查找指定字符在字符串中首次出现的位置, 大小写敏感查找
--***********************************************************	
routine str_find_(InStr : string;
                  FindStr : string) : integer from lib_string

--***********************************************************
-- func str_find2_()
--***********************************************************
--		in : InStr				* string *		* 需要被查找的字符串 *
--		in : FindStr			* string *		* 需要查找的字符 *
--	return : 					* integer *		* 返回位置 （为0则表示查找失败）*
--***********************************************************	
-- 查找指定字符在字符串中首次出现的位置, 大小写非敏感查找
--***********************************************************	
routine str_find2_(InStr : string;
                   FindStr : string) : integer from lib_string

--***********************************************************
-- func int_to_str_()
--***********************************************************
--		in : IntVal				* integer *	* 需要转化的整型 *
--	return : 					* string *	* 返回字符串 *
--***********************************************************	
-- 整型转字符串
--***********************************************************	
routine int_to_str_(IntVal : integer) : string from lib_string 

--***********************************************************
-- func rel_to_str_()
--***********************************************************
--		in : realVal			* real *		* 需要转化的浮点型 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
-- 浮点型转字符串
--***********************************************************	
routine rel_to_str_(realVal : real) : string from lib_string 

--***********************************************************
-- func pos_to_str_()
--***********************************************************
--		in : PosVal				* xyzwpr *		* 需要转化的笛卡尔坐标 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
--	笛卡尔转字符串
--***********************************************************	
routine pos_to_str_(PosVal : xyzwpr) : string from lib_string 

--***********************************************************
-- func ais_to_str_()
--***********************************************************
--		in : AxisVal			* jointpos *	* 需要转化的关节坐标 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
--	关节转字符串
--***********************************************************	
routine ais_to_str_(AxisVal : jointpos) : string from lib_string

--***********************************************************
-- func str_to_int_()
--***********************************************************
--		in : StrVal				* string *	* 需要转化的字符串 *
--	return : 					* integer *	* 返回整型 *
--***********************************************************	
--	字符串转整型
--***********************************************************	
routine str_to_int_(StrVal : string) : integer from lib_string 

--***********************************************************
-- func str_to_rel_()
--***********************************************************
--		in : StrVal				* string *	* 需要转化的字符串 *
--	return : 					* real *	* 返回浮点型 *
--***********************************************************	
--	字符串转浮点型
--***********************************************************	
routine str_to_rel_(StrVal : string) : real from lib_string 

--***********************************************************
-- func str_to_pos_()
--***********************************************************
--		in : StrVal				* string *	* 需要转化的字符串 X, Y, Z, W, P, R *
--	return : 					* xyzwpr *	* 返回笛卡尔坐标 *
--***********************************************************	
--	字符串转笛卡尔坐标
--***********************************************************	
routine str_to_pos_(StrVal : string) : xyzwpr from lib_string 

--***********************************************************
-- func str_to_ais_()
--***********************************************************
--		in : StrVal				* string *		* 需要转化的字符串 A1, A2, A3, A4, A5, A6 *
--	return : 					* jointpos *	* 返回关节 *
--***********************************************************	
--	字符串转关节
--***********************************************************	
routine str_to_ais_(StrVal : string) : jointpos from lib_string

--***********************************************************
-- func str_comp_()
--***********************************************************
--		in : Str1				* string *		* 输入字符串 *
--		in : Str2				* string *		* 输入字符串 *
--		in : NoCase				* boolean *		* true 不区分大小写，false 区分大小写 *
--	return : 					* boolean *	    * 相等返回 true *
--***********************************************************	
--	比较两个字符串是否完全相等
--***********************************************************	
routine str_comp_(Str1 : string;
                  Str2 : string;
                  NoCase : boolean) : boolean from lib_string

--***********************************************************
-- func cur_ios_tm_()
--***********************************************************
--	return : 					* string *	    * 返回时间 *
--***********************************************************	
--	返回当前时间，以 * 年 : 月 : 日 时 : 分 : 秒 * 的形式
--***********************************************************	
routine cur_ios_tm_ : string from lib_string

--***********************************************************
-- func int_2str_()
--***********************************************************
--		in : IntVal				* integer *	    * 需要转化的整型 *
--	return : 					* string *	    * 返回字符串 *
--***********************************************************	
-- 整型转十进制字符串格式，与 int_to_str 函数一样
--***********************************************************	
routine int_2str_(IntVal : integer) : string from lib_string

--***********************************************************
-- func int_2bin_()
--***********************************************************
--		in : IntVal				* integer *	    * 需要转化的整型 *
--	return : 					* string *	    * 返回字符串 *
--***********************************************************	
-- 整型转二进制字符串格式
routine int_2bin_(IntVal : integer) : string from lib_string

--***********************************************************
-- func int_2bin_()
--***********************************************************
--		in : IntVal				* integer *	    * 需要转化的整型 *
--	return : 					* string *	    * 返回字符串 *
--***********************************************************	
-- 整型转十六进制字符串格式
routine int_2hex_(IntVal : integer) : string from lib_string

--***********************************************************
-- func real_2str_()
--***********************************************************
--		in : realVal			* real *		* 需要转化的浮点型 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
-- 浮点型转字符串，与 rel_to_str_ 一样
--***********************************************************	
routine real_2str_(RealVal : real) : string from lib_string

--***********************************************************
-- func pos_2str_()
--***********************************************************
--		in : PosVal				* xyzwprext *	* 需要转化的笛卡尔坐标 *
--		in : IndexVal		    * integer *	    * 需要转化的坐标个数 *
--		in : Sep		        * string *	    * 分隔符 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
--	以指定分隔符将笛卡尔坐标转字符串
--  IndexVal = 6 时，返回 X Y Z W P R
--  IndexVal = 7 时，返回 X Y Z W P R E1
--***********************************************************	
routine pos_2str_(PosVal : xyzwprext;
                  IndexVal : integer;
                  Sep : string) : string from lib_string

--***********************************************************
-- func axis_2str_()
--***********************************************************
--		in : AxisVal			* jointpos *	* 需要转化的关节坐标 *
--		in : IndexVal		    * integer *	    * 需要转化的坐标个数 *
--		in : Sep		        * string *	    * 分隔符 *
--	return : 					* string *		* 返回字符串 *
--***********************************************************	
--	以指定分隔符将关节坐标转字符串
--  IndexVal = 6 时，返回 J1 J2 J3 J4 J5 J6
--  IndexVal = 7 时，返回 J1 J2 J3 J4 J5 J6 J7
--***********************************************************	
routine axis_2str_(AxisVal : jointpos;
                   IndexVal : integer;
                   Sep : string) : string from lib_string

--***********************************************************
-- func str_2int_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转化的字符串 *
--	return : 					* integer *	    * 返回整型 *
--***********************************************************	
--	十进制字符串转整型，与 str_to_int_ 一样
--***********************************************************	
routine str_2int_(StrVal : string) : integer from lib_string

--***********************************************************
-- func str_2int_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转化的字符串 *
--	return : 					* integer *	    * 返回整型 *
--***********************************************************	
--	二进制字符串转整型
--***********************************************************	
routine bin_2int_(StrVal : string) : integer from lib_string

--***********************************************************
-- func str_2int_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转化的字符串 *
--	return : 					* integer *	    * 返回整型 *
--***********************************************************	
--	十六进制字符串转整型
--***********************************************************	
routine hex_2int_(StrVal : string) : integer from lib_string

--***********************************************************
-- func str_2real_()
--***********************************************************
--		in : StrVal				* string *	* 需要转化的字符串 *
--	return : 					* real *	* 返回浮点型 *
--***********************************************************	
--	字符串转浮点型，与 str_to_rel_ 一样
--***********************************************************	
routine str_2real_(StrVal : string) : real from lib_string

--***********************************************************
-- func str_2pos_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转化的字符串 *
--      in : Sep                * string *      * 分隔符 *
--	return : 					* xyzwprext *	* 返回笛卡尔坐标 *
--***********************************************************	
--	将以指定分隔符的字符串转化为笛卡尔坐标
--***********************************************************	
routine str_2pos_(StrVal : string;
                  Sep : string) : xyzwprext from lib_string

--***********************************************************
-- func str_2axis_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转化的字符串 *
--      in : Sep                * string *      * 分隔符 *
--	return : 					* xyzwprext *	* 返回关节坐标 *
--***********************************************************	
--	将以指定分隔符的字符串转化为关节坐标
--***********************************************************	
routine str_2axis_(StrVal : string;
                   Sep : string) : jointpos from lib_string

--***********************************************************
-- func dec_fblank_()
--***********************************************************
--	out : StrVal				* string *	    * 字符串 *
--***********************************************************	
--	去除输入字符串的前空格
--***********************************************************	
routine dec_fblank_(StrVal : string) from lib_string

--***********************************************************
-- func dec_rblank_()
--***********************************************************
--	out : StrVal				* string *	    * 字符串 *
--***********************************************************	
--	去除输入字符串的后空格
--***********************************************************	
routine dec_rblank_(StrVal : string) from lib_string

--***********************************************************
-- func dec_frblank_()
--***********************************************************
--	out : StrVal				* string *	    * 字符串 *
--***********************************************************	
--	去除输入字符串的前后空格
--***********************************************************	
routine dec_frblank_(StrVal : string) from lib_string

--***********************************************************
-- func is_int_()
--***********************************************************
--		in : StrVal				* string *	    * 需要检查的字符串 *
--	return : 					* boolean *	    * 是个整形数字字符串返回 true *
--***********************************************************	
--	检查指定字符串是否是一个整数字符串
--***********************************************************	
routine is_int_(StrVal : string) : boolean from lib_string

--***********************************************************
-- func is_bin_()
--***********************************************************
--		in : StrVal				* string *	    * 需要检查的字符串 *
--	return : 					* boolean *	    * 是个二进制数字字符串返回 true *
--***********************************************************	
--	检查指定字符串是否是一个二进制字符串
--***********************************************************	
routine is_bin_(StrVal : string) : boolean from lib_string

--***********************************************************
-- func is_bin_()
--***********************************************************
--		in : StrVal				* string *	    * 需要检查的字符串 *
--	return : 					* boolean *	    * 是个十六进制数字字符串返回 true *
--***********************************************************	
--	检查指定字符串是否是一个十六进制字符串
--***********************************************************	
routine is_hex_(StrVal : string) : boolean from lib_string

--***********************************************************
-- func low_2upper_()
--***********************************************************
--		in : StrVal				* string *	    * 需要转换的字符串 *
--	return : 					* string *	    * 转换成大小得字符串 *
--***********************************************************	
--	小写转大写
--***********************************************************	
routine low_2upper_(StrVal : string) : string from lib_string

routine str_remove_(StrMsg : string; 
                    StrLead : string) : string from lib_string
