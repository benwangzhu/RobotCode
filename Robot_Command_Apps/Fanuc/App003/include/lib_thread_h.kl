--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_thread_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2022 - 11 - 02
--   Modification Data    ==   2022 - 11 - 02
--
-- Author: speedbot
--
-- Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--


--***********************************************************
-- func thrd_create_()
--***********************************************************
-- 		in : TaskName			* string *		* 需要创建任务的程序名称 *
--      in : RunLine
--	return : 					* integer *		* 任务 ID , < 0 代表失败*
--***********************************************************
--	创建一个新线程，成功创建后会生产一个 > 0 的任务 ID
--***********************************************************
routine thrd_create_(TaskName : string; 
                     RunLine : integer;
                     NoShftPause : boolean) : integer from lib_thread

--***********************************************************
-- func thrd_pause_()
--***********************************************************
-- 		in : TaskName			* string *		* 需要暂停任务的程序名称 *
--	return : 					* integer *		* 任务 ID , < 0 代表失败 *
--***********************************************************
--	暂停一个线程
--	输入程序名为 '*', 可以暂停所有没有进行特殊声明的程序
--***********************************************************
routine thrd_pause_(TaskName : string) : integer from lib_thread

--***********************************************************
-- func thrd_cont_()
--***********************************************************
-- 		in : TaskName			* string *		* 需要继续任务的程序名称 *
--	return : 					* integer *		* 任务 ID , < 0 代表失败 *
--***********************************************************
--	继续一个线程
--***********************************************************
routine thrd_cont_(TaskName : string) : integer from lib_thread

--***********************************************************
-- func thrd_end_()
--***********************************************************
-- 		in : TaskName			* string *		* 需要终止的程序名 *
--***********************************************************
--	终止一个线程
--	输入程序名为 '*', 可以终止所有没有进行特殊声明的程序
--***********************************************************
routine thrd_end_(TaskName : string) from lib_thread

--***********************************************************
-- func task_status_()
--***********************************************************
--  	in : TaskName		* string *		* 需要检测的程序 *
-- 	return : 				* integer *		* 状态码 *
--***********************************************************
--	检查指定任务的当前状态
--  PG_RUNACCEPT            --> 已接受运行请求   (-2)
--  PG_ABORTING             --> 已接受终止请求   (-1)   
--  PG_RUNNING              --> 任务正在运行     (0)
--  PG_PAUSED               --> 任务暂停        (1)  
--  PG_ABORTED              --> 任务终止        (2)
--***********************************************************
routine task_status_(TaskName : string) : integer from lib_thread

--***********************************************************
-- func post_semas_()
--***********************************************************
--  	in : SemId		    * integer *		* 信号量 ID *
--  	in : SemNum		    * integer *		* 发行信号量的次数 *
--***********************************************************
--	向指定信号量 ID 发行指定的信号量
--***********************************************************
routine post_semas_(SemId : integer;
                    SemNum : integer) from lib_thread

--***********************************************************
-- func clear_sema_()
--***********************************************************
--  	in : SemId		    * integer *		* 信号量 ID*
--***********************************************************
--	删除指定信号量 ID 中的所有信号量
--***********************************************************
routine clear_sema_(SemId : integer) from lib_thread

--***********************************************************
-- func pead_sema_()
--***********************************************************
--  	in : SemId		    * integer *		* 信号量 ID *
--  	in : WaitMaxTime	* integer *		* 等待信号量的最长时间，无限等待输入 0 *
-- 	return : 				* boolean *		* true 代表等待超时 *
--***********************************************************
-- 等待指定信号量 ID 中的信号量大于 0
--***********************************************************
routine pead_sema_(SemId : integer;
                   WaitMaxTime : integer) : boolean from lib_thread

--***********************************************************
-- func sema_count_()
--***********************************************************
--  	in : SemId		    * integer *		* 信号量 ID *
-- 	return : 				* integer *		* 信号量数量 *
--***********************************************************
-- 返回指定信号量 ID 中的信号量数量
--***********************************************************
routine sema_count_(SemId : integer) : integer from lib_thread