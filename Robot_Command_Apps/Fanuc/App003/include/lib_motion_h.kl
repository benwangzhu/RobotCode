--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_motion_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2021 - 08 - 16
--   Modification Data    ==   2021 - 08 - 16
--
-- Author: speedbot
--
-- Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
--***********************************************************
-- func get_axs_num_()
--***********************************************************
--		in : GroupNo			* integer *		* 指定的运动组编号 *
--	return : 					* integer *		* 返回轴数 *
--***********************************************************	
--	获取指定运动组的最大轴数
--***********************************************************	
routine get_axs_num_(GrpNo : integer) : integer from lib_motion 

--***********************************************************
-- func null_pos_()
--***********************************************************
--	return : 					* xyzwpr *		* 返回空坐标 *
--***********************************************************	
--	返回空坐标 {0，0，0，0，0，0}
--***********************************************************	
routine null_pos_ : xyzwpr from lib_motion 

--***********************************************************
-- func cur_pos_()
--***********************************************************
--		in : UframeNo			* integer *		* User坐标系号 *
--		in : UtoolNo			* integer *		* Tool坐标系号 *
--	return : 					* xyzwprext *	* 返回的笛卡尔 *
--***********************************************************	
--	获取指定坐标系下的当前笛卡尔位置
--***********************************************************	
routine cur_pos_(UframeNo : integer;
                 UtoolNo : integer) : xyzwprext from lib_motion

--***********************************************************
-- func g2_cur_pos_()
--***********************************************************
--		in : UframeNo			* integer *		* User坐标系号 *
--		in : UtoolNo			* integer *		* Tool坐标系号 *
--	return : 					* xyzwprext *	* 返回的笛卡尔 *
--***********************************************************	
--	获取指定坐标系下的当前笛卡尔位置 ** 运动组2
--***********************************************************	
routine g2_cur_pos_(UframeNo : integer;
                    UtoolNo : integer) : xyzwprext in group[2] from lib_motion

--***********************************************************
-- func g2_cur_pos_()
--***********************************************************
--		in : UframeNo			* integer *		* User坐标系号 *
--		in : UtoolNo			* integer *		* Tool坐标系号 *
--		in : GrpId				* integer *		* 运动组编号 *
--	return : 					* xyzwprext *	* 返回的笛卡尔 *
--***********************************************************	
--	获取指定坐标系下的当前笛卡尔位置 ** 指定运动组
--***********************************************************	
routine c_mulgp_ps_(UframeNo : integer;
                    UtoolNo : integer;
                    GrpId : integer) : xyzwprext from lib_motion
                 

--***********************************************************
-- func cur_jpos_()
--***********************************************************
--	return : 					* jointpos *	* 返回的关节坐标 *
--***********************************************************	
--	获取当前位置的关节坐标
--***********************************************************	
routine cur_jpos_ : jointpos from lib_motion

--***********************************************************
-- func g2_cur_jpos_()
--***********************************************************
--	return : 					* jointpos *	* 返回的关节坐标 *
--***********************************************************	
--	获取当前位置的关节坐标 ** 运动组2
--***********************************************************	
routine g2_cur_jpos_ : jointpos in group[2] from lib_motion

--***********************************************************
-- func c_mulgp_jps_()
--***********************************************************
--		in : GrpId				* integer *		* 运动组编号 *
--	return : 					* jointpos *	* 返回的关节坐标 *
--***********************************************************	
--	获取当前位置的关节坐标 ** 指定运动组
--***********************************************************	
routine c_mulgp_jps_(GrpId : integer) : jointpos from lib_motion

--***********************************************************
-- func trans_pos_()
--***********************************************************
--     in : PosAry       * array[*] of real *	* 需要转化的浮点型数组 *
-- return :              * xyzwprext *			* 返回的笛卡尔 *
--***********************************************************	
--	浮点型数组转笛卡尔
--***********************************************************	
routine trans_pos_(PosAry : array[*] of real) : xyzwprext from lib_motion

--***********************************************************
-- func trans_axis_()
--***********************************************************
--     in : AxisAry      * array[*] of real *	* 需要转化的浮点型数组 *
-- return :              * jointpos *			* 返回的关节 *
--***********************************************************	
--	浮点型数组转笛卡尔
--***********************************************************	
routine trans_axis_(AxisAry : array[*] of real) : jointpos from lib_motion 

--***********************************************************
-- func decom_pos_()
--***********************************************************
--     in : ThisPos      * xyzwprext *			* 需要转化的笛卡尔 *
-- return :              * array[*] of real *	* 返回的浮点型数组 *
--***********************************************************	
--	笛卡尔转浮点型数组
--***********************************************************	
routine decom_pos_(ThisPos : xyzwprext) : array[*] of real from lib_motion

--***********************************************************
-- func decom_pos2_()
--***********************************************************
--     in : ThisPos      * xyzwprext *			* 需要转化的笛卡尔 *
--    out :              * array of real *	    * 返回的浮点型数组 *
--***********************************************************	
--	笛卡尔转浮点型数组
--***********************************************************	
routine decom_pos2_(ThisPos : xyzwprext;
                    ThisAry : array of real) from lib_motion

--***********************************************************
-- func decom_axis_()
--***********************************************************
--     in : ThisJPos     * jointpos *			* 需要转化的关节坐标 *
-- return :              * array[*] of real *	* 返回的浮点型数组 *
--***********************************************************
--	关节转浮点型数组
--***********************************************************	
routine decom_axis_(ThisJPos : jointpos) : array[*] of real from lib_motion

--***********************************************************
-- func decom_axis2_()
--***********************************************************
--     in : ThisJPos     * jointpos *			* 需要转化的关节坐标 *
--    out :              * array of real *	    * 返回的浮点型数组 *
--***********************************************************
--	关节转浮点型数组
--***********************************************************	
routine decom_axis2_(ThisJPos : jointpos;
                     ThisAry : array of real) from lib_motion

--***********************************************************
-- func chk_pos_()
--***********************************************************
--		in : NeedChkPos			* xyzwprext *	* 需要检测的笛卡尔 *
--		in : UframeNo			* integer *		* 指定的User坐标系 *
--		in : UtoolNo			* integer *		* 指定的Tool坐标系 *
--	return : 					* boolean *		* TRUE 为可达 *
--***********************************************************	
--	检测笛卡尔位置点在指定坐标系下是否可达
--***********************************************************	
routine chk_pos_(NeedChkPos : xyzwprext;
                 UframeNo : integer;
                 UtoolNo : integer) : boolean from lib_motion 

--***********************************************************
-- func chk_joint_()
--***********************************************************
--		in : ThisJoint			* jointpos *	* 需要检测的关节坐标 *
--	return : 					* boolean *		* TRUE 为可达 *
--***********************************************************	
--	检测关节位置点是否可达
--***********************************************************	
routine chk_joint_(ThisJoint : jointpos) : boolean from lib_motion 

--***********************************************************
-- func g2_chk_jnt_()
--***********************************************************
--		in : ThisJoint			* jointpos *	* 需要检测的关节坐标 *
--	return : 					* boolean *		* TRUE 为可达 *
--***********************************************************	
--	检测关节位置点是否可达 ** 运动组2
--***********************************************************	
routine g2_chk_jnt_(ThisJoint : jointpos in group[2]) : boolean from lib_motion                 

--***********************************************************
-- func move_j_()
--***********************************************************
--     in : PointName    * xyzwprext *		* 需要移动的目标位置 *
--     in : Speed        * real *			* 移动速度 *
--     in : Accu         * integer *   < FINE = 1 , COARSE = 2 , NOSETTLE = 3 , NODECEL = 4 >	* 定位精度 *
--     in : UframeNo     * integer *		* User 坐标系 *
--     in : UtoolNo      * integer *		* Tool 坐标系 *
--***********************************************************
--	关节移动
--***********************************************************	
routine move_j_(PointName : xyzwprext;
                Speed : real;
                Accu : integer;
                UframeNo : integer;
                UtoolNo : integer) from lib_motion 

--***********************************************************
-- func move_l_()
--***********************************************************
--     in : PointName    * xyzwprext *		* 需要移动的目标位置 *
--     in : Speed        * real *			* 移动速度 *
--     in : Accu         * integer *   < FINE = 1 , COARSE = 2 , NOSETTLE = 3 , NODECEL = 4 >	* 定位精度 *
--     in : UframeNo     * integer *		* User 坐标系 *
--     in : UtoolNo      * integer *		* Tool 坐标系 *
--***********************************************************
--	直线移动
--***********************************************************	
routine move_l_(PointName : xyzwprext;
                Speed : real;
                Accu : integer;
                UframeNo : integer;
                UtoolNo : integer) from lib_motion 

--***********************************************************
-- func move_abs_j_()
--***********************************************************
--     in : PointName    * jointpos *		* 需要移动的目标位置 （关节型）*
--     in : Speed        * real *			* 移动速度 *
--     in : Accu         * integer *   < FINE = 1 , COARSE = 2 , NOSETTLE = 3 , NODECEL = 4 >	* 定位精度 *
--***********************************************************	
--	关节移动
--***********************************************************	
routine move_abs_j_(PointName : jointpos;
                    Speed : real;
                    Accu : integer) from lib_motion

--***********************************************************
-- func g2_m_abs_j_()
--***********************************************************
--     in : PointName    * jointpos *		* 需要移动的目标位置 （关节型）*
--     in : Speed        * real *			* 移动速度 *
--     in : Accu         * integer *   < FINE = 1 , COARSE = 2 , NOSETTLE = 3 , NODECEL = 4 >	* 定位精度 *
--***********************************************************	
--	关节移动 ** 运动组2
--***********************************************************	
routine g2_m_abs_j_(PointName : jointpos in group[2];
                    Speed : real;
                    Accu : integer) from lib_motion

--***********************************************************
-- func lock_grp_()
--***********************************************************
--     in : GrpNo          * integer *	* 需要锁定的运动组号 （1，2，4，8，16，32）*
--***********************************************************
--	锁定指定的运动组（在没有激活运动组的程序中使用可以驱动机器人）
--***********************************************************	
routine lock_grp_(GrpNo : integer) : boolean from lib_motion

--***********************************************************
-- func unlock_grp_()
--***********************************************************
--     in : GrpNo          * integer *	* 需要解锁的运动组号 （1，2，4，8，16，32）* 
--***********************************************************
--	解锁指定的运动组
--***********************************************************	
routine unlock_grp_(GrpNo : integer) from lib_motion

--***********************************************************
-- func j_in_here_()
--***********************************************************
--     in : JointCoord          * jointpos *	* 需要检查的轴坐标 * 
-- return :				 		* boolean *		* 返回 TRUE 表示已经到达目标位置 *
--***********************************************************
--	检查机器人是否已经到达目标轴位置
--***********************************************************	
routine j_in_here_(JointCoord : jointpos) : boolean from lib_motion

--***********************************************************
-- func l_in_here_()
--***********************************************************
--     in : LPosCoord           * xyzwprext *	* 需要检查的笛卡尔坐标 * 
--     in : UframeNo            * integer *		* 相对的用户坐标系号 *
--     in : UtoolNo     		* integer * 	* 相对的工具坐标系号 *
-- return :				 		* boolean *		* 返回 TRUE 表示已经到达目标位置 *
--***********************************************************
--	检查机器人是否已经到达目标笛卡尔位置
--***********************************************************	
routine l_in_here_(LPosCoord : jointpos;
                   UframeNo : integer;
                   UtoolNo : integer) : boolean from lib_motion

--***********************************************************
-- func speed_lim_()
--***********************************************************
--  	in : GrpNo			* integer * 		* 组号 *
-- 	return : 				* real *			* 返回最大速度 *
--***********************************************************
-- 返回指定运动组的最大运动速度
--***********************************************************	
routine speed_lim_(GrpNo : integer) : real from lib_motion

--***********************************************************
-- func jnt_2cart_()
--***********************************************************
--  	in : ThisJoint			* jointpos * 		* 需要求正解的关节坐标 *
--  	in : UframeNo			* integer * 		* 引用的用户坐标系编号 *
--  	in : UtoolNo			* integer * 		* 引用的工具坐标系编号 *
-- 	return : 				    * xyzwprext *		* 返回的解 *
--***********************************************************
-- 以通常解的形式对一组关节坐标进行正解
--***********************************************************	
routine jnt_2cart_(ThisJoint : jointpos;
                   UframeNo : integer;
                   UtoolNo : integer) : xyzwprext from lib_motion

--***********************************************************
-- func cart_2jnt_()
--***********************************************************
--  	in : ThisCtPos			* xyzwprext * 		* 需要求逆解的直角坐标 *
--  	in : UframeNo			* integer * 		* 引用的用户坐标系编号 *
--  	in : UtoolNo			* integer * 		* 引用的工具坐标系编号 *
-- 	return : 				    * jointpos *		* 返回的解 *
--***********************************************************
-- 以通常解的形式对一组之间坐标进行逆解
--***********************************************************	
routine cart_2jnt_(ThisCtPos : xyzwprext;
                   UframeNo : integer;
                   UtoolNo : integer) : jointpos from lib_motion

--***********************************************************
-- func cur_trq_()
--***********************************************************
--   inout : TrqVal			    * array of real * 	* 存储扭矩值用的变量 *
--***********************************************************
-- 获取机器人轴或者扩展轴的扭矩
--***********************************************************	
routine cur_trq_(TrqVal : array of real) from lib_motion

--***********************************************************
-- func cur_vel_()
--***********************************************************
--   in : GrpNo			        * integer * 	* 指定的运动组编号 *
--***********************************************************
-- 获取机器人当前的实际速度
--***********************************************************	
routine cur_vel_(GrpNo : integer) : real from lib_motion

--***********************************************************
-- func trans_dx_()
--***********************************************************
--      in : Dx			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 X 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dx_(Dx : real) : xyzwpr from lib_motion

--***********************************************************
-- func trans_dy_()
--***********************************************************
--      in : Dy			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 Y 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dy_(Dy : real) : xyzwpr from lib_motion

--***********************************************************
-- func trans_dz_()
--***********************************************************
--      in : Dz			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 Z 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dz_(Dz : real) : xyzwpr from lib_motion

--***********************************************************
-- func trans_dw_()
--***********************************************************
--      in : Dw			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 W 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dw_(Dw : real) : xyzwpr from lib_motion

--***********************************************************
-- func trans_dp_()
--***********************************************************
--      in : Dp			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 P 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dp_(Dp : real) : xyzwpr from lib_motion

--***********************************************************
-- func trans_dr_()
--***********************************************************
--      in : Dr			        * integer * 	* 指定的运动组编号 *
--  return :                    * xyzwpr *      * 返回指定单个方向的坐标值 *
--***********************************************************
-- 指定坐标 R 方向，其它方向都指定为 0
--***********************************************************	
routine trans_dr_(Dr : real) : xyzwpr from lib_motion