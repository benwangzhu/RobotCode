--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_logs_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2021 - 09 - 18
--   Modification Data    ==   2021 - 09 - 18
--
-- Author: speedbot
--
-- Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
--***********************************************************
-- func log_clear_()
--***********************************************************
--	清空 USER 屏幕
--***********************************************************	
routine log_clear_ from lib_logs

--***********************************************************
-- func log_force_()
--***********************************************************
--	强制弹屏 USER 屏幕
--***********************************************************	
routine log_force_ from lib_logs

--***********************************************************
-- func log_error_()
--***********************************************************
-- in : Tag      * string *		* 需要显示的标签名 *
-- in : Msg      * string *		* 需要显示的输出消息 *
--***********************************************************	
--	在 USER 屏幕显示一条错误消息
--***********************************************************	
routine log_error_(Tag : string;
                   Msg : string) from lib_logs

--***********************************************************
-- func log_error_()
--***********************************************************
-- in : Tag      * string *		* 需要显示的标签名 *
-- in : Msg      * string *		* 需要显示的警告消息 *
--***********************************************************	
--	在 USER 屏幕显示一条警告消息
--***********************************************************	
routine log_info_(Tag : string;
                  Msg : string) from lib_logs

--***********************************************************
-- func log_error_()
--***********************************************************
-- in : Tag      * string *		* 需要显示的标签名 *
-- in : Msg      * string *		* 需要显示的错误消息 *
--***********************************************************	
--	在 USER 屏幕显示一条错误消息
--***********************************************************	
routine log_warn_(Tag : string;
                  Msg : string) from lib_logs

--***********************************************************
-- func u_select_s_()
--***********************************************************
-- in : Tag      * string *		* 需要显示的标签名 *
-- in : Msg      * string *		* 需要显示的错误消息 *
--***********************************************************	
--	从 USER 界面读取一段字符数据
--***********************************************************	
routine u_select_s_ : string from lib_logs

--***********************************************************
-- func u_select_i_()
--***********************************************************
--	return : 					* integer *
--***********************************************************	
--	从 USER 界面读取一段整型数据
--***********************************************************	
routine u_select_i_ : integer from lib_logs

--***********************************************************
-- func u_select_r_()
--***********************************************************
--	return : 					* real *
--***********************************************************	
--	从 USER 界面读取一段浮点型数据
--***********************************************************	
routine u_select_r_ : real from lib_logs

--***********************************************************
-- func open_file_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : FileName           * string *      * 文件名及扩展名 *
--      in : OpenMode           * integer *     * 文件打开模式 *
--	return : 					* integer *     * 成功打开返回 0 *
--***********************************************************	
--	打开一个文件，与 FILE 变量关联
--  文件打开模式预定义常量
--  STR_READ        以 ASCII 格式进行打开，仅读， 未找到文件时返回错误
--  STR_RW          以 ASCII 格式进行打开，读写， 未找到文件时创建文件
--  STR_AP          以 ASCII 格式进行打开，追加， 未找到文件时创建文件
--  BIN_READ        以 BIN 格式进行打开，仅读， 未找到文件时返回错误
--  BIN_RW          以 BIN 格式进行打开，读写， 未找到文件时创建文件
--  BIN_AP          以 BIN 格式进行打开，追加， 未找到文件时创建文件
--***********************************************************	
routine open_file_(FileVar : file;
                   FileName : string;
                   OpenMode : integer) : integer from lib_logs

--***********************************************************
-- func close_file_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--***********************************************************	
--	关闭一个文件，与 FILE 取消关联
--***********************************************************	
routine close_file_(FileVar : file) from lib_logs

--***********************************************************
-- func file_wteln_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : NumOfLn            * integer *     * 需要换行的行数 *
--***********************************************************	
--	在文件中进行写入换行操作，可以指定换行的数量
--***********************************************************	
routine file_wteln_(FileVar : file;
                    NumOfLn : integer) from lib_logs

--***********************************************************
-- func file_puts_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : Msg                * string *      * 需要写进文件的字符串 *
--      in : NewLine            * boolean *     * 指定是否在写入完成后换行 *
--***********************************************************	
--	在文件中写入字符串
--***********************************************************	
routine file_puts_(FileVar : file;
                   Msg : string;
                   NewLine : boolean) from lib_logs

--***********************************************************
-- func file_size_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : FileName           * string *      * 文件名及扩展名 *
--	return : 					* integer *     * 返回字节数 *
--***********************************************************	
--	获取指定文件的字节大小
--  返回的字节数小于 0 时，可能是因为没有被创建
--***********************************************************	
routine file_size_(FileVar : file;
                   FileName : string) : integer from lib_logs

--***********************************************************
-- func delete_file_()
--***********************************************************
--      in : FileName           * string *      * 文件名及扩展名 *
--***********************************************************	
--	删除一个文件
--***********************************************************	
routine delete_file_(FileName : string) from lib_logs

--***********************************************************
-- func rename_file_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : FileName           * string *      * 修改前的文件名及扩展名 *
--      in : NewFileName        * string *      * 修改后的文件名及扩展名 *
--***********************************************************	
--	修改一个文件的名称及扩展名
--  如果在修改前已有这个名字，那么会在修改前将原来的文件进行删除，再进行修改
--***********************************************************	
routine rename_file_(FileVar : file;
                     FileName : string;
                     NewFileName : string) from lib_logs

--***********************************************************
-- func file_creatd_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : FileName           * string *      * 文件名及扩展名 *
--	return : 					* integer *     * 返回是否已经创建的状态 *
--***********************************************************	
--	检查一个文件是否已经被创建
--  返回 TRUE 表示已经被创建
--***********************************************************	
routine file_creatd_(FileVar : file;
                     FileName : string) : boolean from lib_logs

--***********************************************************
-- func logs_()
--***********************************************************
--      in : FileVar            * file *        * 与文件关联的FILE变量 *
--      in : FileName           * string *      * 文件名及扩展名 *
--      in : Msg                * string *      * 需要记录的日志消息 *
--***********************************************************	
--	日志记录
--  当文件总大小大于 MAX_LOG_SIZE 时， 会将原来的日志 COPY 一份 _old 文件
--  再进行重新记录
--***********************************************************	
routine logs_(FileVar : file;
              FileName : string;
              Msg : string) from lib_logs

--***********************************************************
-- func get_xml_prm_()
--***********************************************************
--      in : FileVar            * file *        * 与 XML 文件关联的FILE变量 *
--      in : XmlFileName        * string *      * XML 文件名 *
--      in : XmlTagName         * string *      * XML 标记名 *
--      in : ProgramName        * string *      * 变量所在的程序名 *
--      in : VarName            * string *      * 变量名 *
--	return : 					* integer *     * 读出状态，不为 0 代表失败 *
--***********************************************************	
--	从 XML 文件中读出参数赋值到 VarName 中
--  XmlFileName 必须带有文件夹名称 例如 MC:Test.xml
--  XmlTagName 标记下的节点名称必须与 VarName 一致
--  读取一个结构型变量时，结构中每个节点必须都要与 XmlTagName 标记下的节点名称匹配
--
--  自定义结构 XML 格式
--  <user_struc_t first="123456" second="78910.5" third="1" fourth="A String" /> 
--
--  VECTOR 结构 XML 格式
--  <vector_t x = "1.0" y = "2.0" z = "3.0" /> 
--
--  XYZWPR 结构 XML 格式
--  <xyzwpr_t x = "1.0" y = "2.0" z = "3.0" w = "1.0" p = "2.0" r = "3.0" config = "nut" /> 
--
--  JOINTPOS 结构 XML 格式
--  <joints_t j1 = "1.0" j2 = "2.0" j3 = "3.0" j4 = "1.0" j5 = "2.0" j6 = "3.0" /> 
--***********************************************************	
routine get_xml_prm_(FileVar : file;
                     XmlFileName : string;
                     XmlTagName : string;
                     ProgramName : string;
                     VarName : string) : integer from lib_logs
