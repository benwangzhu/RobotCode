--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_math_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2022 - 05 - 05
--   Modification Data    ==   2022 - 05 - 06
--
-- Author: speedbot
--
-- Version: 1.1
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--

--***********************************************************
-- func random_()
--***********************************************************
--     in : MinNum          * integer *	    * 最大数 *
--     in : MaxNum          * integer *	    * 最小数 *
-- return :				    * integer *	    * 返回随机数 *
--***********************************************************	
-- 从指定的最大数值和最小数值中产生一个随机数
--***********************************************************	
routine random_(MinNum : integer;
                MaxNum : integer) : integer from lib_math 

--***********************************************************
-- func deg_to_rad_()
--***********************************************************
--     in : Rdeg         * real *	* 需要转化的度数 *
-- return :				 * real *	* 返回相应的弧度 *
--***********************************************************	
--	度转弧度
--***********************************************************	
routine deg_to_rad_(Rdeg : real) : real from lib_math

--***********************************************************
-- func rad_to_deg_()
--***********************************************************
--     in : Rrad         * real *	* 需要转化的弧度 *
-- return :				 * real *	* 返回相应的度 *
--***********************************************************	
--	弧度转度
--***********************************************************	
routine rad_to_deg_(Rrad : real) : real from lib_math

--***********************************************************
-- func sq_()
--***********************************************************
--     in : Val             * real *	* 需要进行平方的值 *
-- return :				    * real *	* 返回平方后的值 *
--***********************************************************	
--	返回一个实数的平方
--***********************************************************	
routine sq_(Val : real) : real from lib_math

--***********************************************************
-- func pow_()
--***********************************************************
--     in : Val             * real *	* 需要进行幂的值 *
-- return :				    * real *	* 返回幂后的值 *
--***********************************************************	
--	返回一个实数的幂
--***********************************************************	
routine pow_(Val : real) : real from lib_math

routine pow2_(PowInt : integer) : integer from lib_math

--***********************************************************
-- func x_pow_()
--***********************************************************
--     in : Val             * real *	* 底数 *
--     in : ExpVal          * integer *	* 指数 *
-- return :				    * real *	* 返回值 *
--***********************************************************	
--	返回指数个底数相乘的积
--***********************************************************	
routine x_pow_(Val : real;
               ExpVal : integer) : real from lib_math


--***********************************************************
-- func p_distance_()
--***********************************************************
--     in : P1              * xyzwprext *	* 位置点1 *
--     in : P2              * xyzwprext *	* 位置点2 *
-- return :				    * real *	    * 返回两个点的距离 *
--***********************************************************	
--	计算两个位置点之间的直线距离，不考虑地轨轴
--***********************************************************	
routine p_distance_(P1 : xyzwprext;
                    P2 : xyzwprext) : real from lib_math

--***********************************************************
-- func int_to_bol_()
--***********************************************************
--     in : Int             * integer *	    * 整型数值 *
-- return :				    * boolean *	    * 返回值 *
--***********************************************************	
--	整型转布尔型
--  只要 Int > 0 就会返回 TRUE ，否则 返回 FALSE
--***********************************************************	
routine int_to_bol_(Int : integer) : boolean from lib_math

--***********************************************************
-- func int_to_bol_()
--***********************************************************
--     in : Bool            * boolean *	    * 布尔值数值 *
-- return :				    * integer *	    * 返回值 *
--***********************************************************	
--	尔型转整型
--  TRUE == 1 ； FALSE == 0
--***********************************************************	
routine bol_to_int_(Bool : boolean) : integer from lib_math

--***********************************************************
-- func word_2str_()
--***********************************************************
--     in : WordVal         * short *	    * 0 - 65535 *
-- return :				    * string *	    * 返回值 *
--***********************************************************	
--	
--  字转字符串
--  将一个两个字节的数转化成两个字符
--***********************************************************	
routine word_2str_(WordVal : integer) : string from lib_math

--***********************************************************
-- func str_2word_()
--***********************************************************
--     in : StrVal          * string *	    * 一个或者两个字符 *
-- return :				    * integer *	    * 返回值 *
--***********************************************************	
--	
--  字符串转无符号短整型
--  将一个或者两个字符转成无符号短整型
--***********************************************************	
routine str_2word_(StrVal : string) : integer from lib_math

--***********************************************************
-- func bit_2int_()
--***********************************************************
--     in : Bits            * bool32_t *	* BIT位，在 lib_math_t 文件中已定义 *
--     in : Len             * integer *	    * BIT位长度 (0, 32]*
--     in : Reversed        * boolean *	    * true 代表小端模式， false 代表大端模式*
--     in : IsSign          * boolean *	    * true 代表有符号， false 代表无符号 *
-- return :				    * integer *	    * 返回值 *
--***********************************************************	
--	
--  将指定长度的位按照二进制转化为十进制
--  只要超过 1 个字节的整字节单位才存在大小端，否则默认以小端
--  默认以低位在前，高位在后
--  当 Len = 32 时，IsSign必须指定为 true, 因为 integer 在 karel 中定义域为  [-2147483648, +2147483647]
--***********************************************************	
routine bit_2int_(Bits : bool32_t;
                  Len : integer
                  Reversed : boolean;
                  IsSign : boolean) : integer from lib_math

--***********************************************************
-- func bit_2int_()
--***********************************************************
--     in : IntVal          * integer *	    * 十进制数 *
--     in : Len             * integer *	    * BIT位长度 (0, 32]*
--     in : Reversed        * boolean *	    * true 代表小端模式， false 代表大端模式 *
-- return :				    * bool32_t *	* 返回值 *
--***********************************************************	
--	
--  将指定十进制整型转化为指定长度的位
--  根据整数数值和BIT位长度自定识别有无符号
--  只要超过 1 个字节的整字节单位才存在大小端，否则默认以小端
--  十进制数必须在BIT位长度组成的定义域内
--***********************************************************	
routine int_2bit_(IntVal : integer;
                  Len : integer;
                  Reversed : boolean) : bool32_t from lib_math

--***********************************************************
-- func bit_2rel_()
--***********************************************************
--     in : Bits            * bool32_t *	* BIT位，在 lib_math_t 文件中已定义 *
--     in : Reversed        * boolean *	    * true 代表小端模式， false 代表大端模式*
-- return :				    * real *	    * 返回值 *
--***********************************************************	
--	
--  将指定位按照 IEEE-754 标志转化为浮点型
--  默认以低位在前，高位在后
--***********************************************************	
routine bit_2rel_(Bits : bool32_t;
                  Reversed : boolean) : real from lib_math 

--***********************************************************
-- func rel_2bit_()
--***********************************************************
--     in : RelVal          * real *	    * 需要转化的浮点数 *
--     in : Reversed        * boolean *	    * true 代表小端模式， false 代表大端模式*
-- return :				    * bool32_t *	* 返回值 *
--***********************************************************	
--	
--  将指定浮点数按照 IEEE-754 标志转化为位
--  默认以低位在前，高位在后
--***********************************************************	
routine rel_2bit_(RelVal : real;
                  Reversed : boolean) : bool32_t from lib_math 

--***********************************************************
-- func io_2byte_()
--***********************************************************
--     in : PortType        * integer *	            * IO类型，在 KLIOTYPS 文件中已定义 *
--     in : StartPt         * integer *	            * 开始位 *
--     in : EndPt           * integer *	            * 结束位 *
--    out : ByteVal         * array of integer *    * 输出的字节 *
--***********************************************************	
--  将指定信号转化为字节
--  例 ：io_2byte_(io_dout, 1, 128, ByteVal)
--  将 DO[1] - DO[128] 转化为 16 个字节
--***********************************************************	
routine io_2byte_(PortType : integer;
                  StartPt : integer;
                  EndPt : integer;
                  ByteVal : array of integer) from lib_math 

--***********************************************************
-- func byte_2io_()
--***********************************************************
--     in : ByteVal         * array of integer *    * 需要转化的字节 *
--     in : StartPt         * integer *	            * 开始位 *
--     in : EndPt           * integer *	            * 结束位 *
--     in : SetPt           * integer *	            * 第一个设置位 *
--***********************************************************	
--	将字节转化为 DO 的输出
--  StartPt 指定的从第一个字节最低位开始对应的 DO 编号
--  SetPt 指定的开始设置的编号, 从起始位到第一个设置位之间的信号不会被设置
--***********************************************************	
routine byte_2io_(ByteVal : array of integer;
                  StartPt : integer;
                  EndPt : integer;
                  SetPt : integer) from lib_math 

--***********************************************************
-- func io_2byte_()
--***********************************************************
--     in : PortType        * integer *	            * IO类型，在 KLIOTYPS 文件中已定义 *
--     in : StartPt         * integer *	            * 开始位 *
--     in : EndPt           * integer *	            * 结束位 *
--    out : ByteVal         * array of byte *       * 输出的字节 *
--***********************************************************	
--  将指定信号转化为字节
--  例 ：io_2byte_(io_dout, 1, 128, ByteVal)
--  将 DO[1] - DO[128] 转化为 16 个字节
--***********************************************************	
routine io_2byt_(PortType : integer;
                  StartPt : integer;
                  EndPt : integer;
                  ByteVal : array of byte) from lib_math 

--***********************************************************
-- func byte_2io_()
--***********************************************************
--     in : ByteVal         * array of byte *       * 需要转化的字节 *
--     in : StartPt         * integer *	            * 开始位 *
--     in : EndPt           * integer *	            * 结束位 *
--     in : SetPt           * integer *	            * 第一个设置位 *
--***********************************************************	
--	将字节转化为 DO 的输出
--  StartPt 指定的从第一个字节最低位开始对应的 DO 编号
--  SetPt 指定的开始设置的编号, 从起始位到第一个设置位之间的信号不会被设置
--***********************************************************	
routine byt_2io_(ByteVal : array of byte;
                  StartPt : integer;
                  EndPt : integer;
                  SetPt : integer) from lib_math 

--***********************************************************
-- func max_()
--***********************************************************
--     in : Val1            * real *                * 值1 *
--     in : Val2            * real *	            * 值2 *
-- return :                 * real *	            * 返回最大值 *
--***********************************************************	
--	返回两个数中的最大值
--***********************************************************	
routine max_(Val1 : real;
             Val2 : real) : real from lib_math

--***********************************************************
-- func max_()
--***********************************************************
--     in : Val1            * real *                * 值1 *
--     in : Val2            * real *	            * 值2 *
-- return :                 * real *	            * 返回最小值 *
--***********************************************************	
--	返回两个数中的最小值
--***********************************************************	
routine min_(Val1 : real;
             Val2 : real) : real from lib_math
             
--***********************************************************
-- func swap_int_()
--***********************************************************
--     in : IntVal          * integer *             * 整数值 *
-- return :                 * integer *	            * 转化后的整数值 *
--***********************************************************	
--	四字节整数大小端转化
--***********************************************************	
routine swap_int_(IntVal : integer) : integer from lib_math

--***********************************************************
-- func swap_real_()
--***********************************************************
--     in : RealVal         * real *                * 浮点数值 *
-- return :                 * real *	            * 转化后的浮点数值 *
--***********************************************************	
--	浮点数大小端转化
--***********************************************************	
routine swap_real_(RealVal : real) : real from lib_math

--***********************************************************
-- func swap_short_()
--***********************************************************
--     in : ShortVal        * short *               * 整数值 *
-- return :                 * short *	            * 转化后的整数值 *
--***********************************************************	
--	双字节整数大小端转化
--***********************************************************	
routine swap_short_(ShortVal : integer) : integer from lib_math

--***********************************************************
-- func tern_int_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	整形三元表达式
--***********************************************************	
routine tern_int_(Exprsn : boolean;
                  Val1 : integer;
                  Val2 : integer) : integer from lib_math

--***********************************************************
-- func tern_bool_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	布尔型三元表达式
--***********************************************************	
routine tern_bool_(Exprsn : boolean;
                   Val1 : boolean;
                   Val2 : boolean) : boolean from lib_math

--***********************************************************
-- func tern_real_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	浮点型三元表达式
--***********************************************************	
routine tern_real_(Exprsn : boolean;
                   Val1 : real;
                   Val2 : real) : real from lib_math

--***********************************************************
-- func tern_str_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	字符串形三元表达式
--***********************************************************	
routine tern_str_(Exprsn : boolean;
                  Val1 : string;
                  Val2 : string) : string from lib_math

--***********************************************************
-- func tern_cart_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	直角坐标形三元表达式
--***********************************************************	
routine tern_cart_(Exprsn : boolean;
                   Val1 : xyzwprext;
                   Val2 : xyzwprext) : xyzwprext from lib_math

--***********************************************************
-- func tern_jnt_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * integer *             * 值1 *
--     in : Val2            * integer *             * 值2 *
-- return :                 * integer *	            * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	关节坐标形三元表达式
--***********************************************************	
routine tern_jnt_(Exprsn : boolean;
                  Val1 : jointpos;
                  Val2 : jointpos) : jointpos from lib_math


--***********************************************************
-- func tern_aryrel_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * array of real *       * 数组值1 *
--     in : Val2            * array of real *       * 数组值2 *
-- return :                 * array of real *	    * Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	浮点型数组三元表达式
--***********************************************************	
routine tern_aryrel_(Exprsn : boolean;
                     Val1 : array of real;
                     Val2 : array of real) : array of real from lib_math

--***********************************************************
-- func tern_aryint_()
--***********************************************************
--     in : Exprsn          * boolean *             * 表达式 *
--     in : Val1            * array of integer *    * 数组值1 *
--     in : Val2            * array of integer *    * 数组值2 *
-- return :                 * array of integer *	* Exprsn == true 返回 Val1 ；Exprsn == false 返回 Val2 *
--***********************************************************	
--	整型数组三元表达式
--***********************************************************	
routine tern_aryint_(Exprsn : boolean;
                     Val1 : array of integer;
                     Val2 : array of integer) : array of integer from lib_math


routine gg_frame_(OfsPosn : xyzwprext;
                  OrgFrameNo : integer;
                  OfsFrameNo : integer;
                  GrpNo : integer) from lib_math

routine ts_frame_(OfsPosn : xyzwprext;
                  OfsFrameNo : integer;
                  NewFrameNo : integer;
                  GrpNo : integer) : xyzwprext from lib_math                  


routine rob_2cd_(RobPosn : xyzwprext;
                 DynPosn : xyzwprext;
                 CdFrame : xyzwprext) : xyzwprext from lib_math

routine cd_2rob_(CdPosn : xyzwprext;
                 DynPosn : xyzwprext;
                 CdFrame : xyzwprext) : xyzwprext from lib_math

