--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_momory_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2023 - 04 - 13
--   Modification Data    ==   2023 - 04 - 13
--
-- Author: speedbot
--
-- Version: 1.1
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
--***********************************************************
-- func byte_2real_()
--***********************************************************
--     in : ByteVal         * byte4_t *             * 字节 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * real *	            * 返回值 *
--***********************************************************	
--	将字节转化为浮点型
--***********************************************************	
routine byte_2real_(ByteVal : byte4_t;
                    Reversed : boolean) : real from lib_momory

--***********************************************************
-- func byte_2int_()
--***********************************************************
--     in : ByteVal         * byte4_t *             * 字节 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * integer *	            * 返回值 *
--***********************************************************	
--	将字节转化为整型
--***********************************************************	
routine byte_2int_(ByteVal : byte4_t;
                   Reversed : boolean) : integer from lib_momory

--***********************************************************
-- func byte_2short_()
--***********************************************************
--     in : ByteVal         * byte4_t *             * 字节 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * integer *	            * 返回值 *
--***********************************************************	
--	将字节转化为短整型
--***********************************************************	
routine byte_2short_(ByteVal : byte2_t;
                     Reversed : boolean) : integer from lib_momory

--***********************************************************
-- func byte_2str_()
--***********************************************************
--     in : ByteVal         * byte4_t *             * 字节 *
--     in : Lens            * integer *             * 需要转化的长度 *
-- return :                 * integer *	            * 返回值 *
--***********************************************************	
--	将字节转化为字符串型
--***********************************************************	
routine byte_2str_(ByteVal : byte254_t;
                   Lens : integer) : string from lib_momory

--***********************************************************
-- func real_2byte_()
--***********************************************************
--     in : RealVal         * real *                * 浮点数 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * byte4_t *	            * 返回值 *
--***********************************************************	
--	将浮点数转化为字节
--***********************************************************	
routine real_2byte_(RealVal : real;
                    Reversed : boolean) : byte4_t from lib_momory

--***********************************************************
-- func int_2byte_()
--***********************************************************
--     in : IntVal          * integer *             * 整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * byte4_t *	            * 返回值 *
--***********************************************************	
--	将整数转化为字节
--***********************************************************	
routine int_2byte_(IntVal : integer;
                   Reversed : boolean) : byte4_t from lib_momory

--***********************************************************
-- func short_2byte_()
--***********************************************************
--     in : ShortVal        * integer *             * 短整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
-- return :                 * byte4_t *	            * 返回值 *
--***********************************************************	
--	将整数转化为字节
--***********************************************************	
routine short_2byte_(ShortVal : integer;
                     Reversed : boolean) : byte2_t from lib_momory

--***********************************************************
-- func str_2byte_()
--***********************************************************
--     in : StrVal          * string *              * 短整数 *
--     in : Lens            * integer *             * 需要转化的长度 *
-- return :                 * byte4_t *	            * 返回值 *
--***********************************************************	
--	将字符串转化为字节
--***********************************************************	
routine str_2byte_(StrVal : string;
                   Lens : integer) : byte254_t from lib_momory

--***********************************************************
-- func raw_clear_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--***********************************************************	
--	字节包初始化
--***********************************************************	
routine raw_clear_(Rawbyte : byte512_t) from lib_momory

--***********************************************************
-- func raw_pkr_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * real *                * 浮点数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将浮点数打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pkr_(Rawbyte : byte512_t;
                 Offset : integer;
                 Val : real;
                 Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_pkdi_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * integer *             * 整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将整数打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pkdi_(Rawbyte : byte512_t;
                  Offset : integer;
                  Val : integer;
                  Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_pki_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * integer *             * 短整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将短整数打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pki_(Rawbyte : byte512_t;
                 Offset : integer;
                 Val : integer;
                 Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_pks_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * string *              * 字符串 *
--     in : Lens            * integer *             * 需要进行打包的长度 *
--***********************************************************	
-- 将短字符串打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pks_(Rawbyte : byte512_t;
                 Offset : integer;
                 Val : string;
                 Lens : integer) from lib_momory

--***********************************************************
-- func raw_pkra_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * array of real *       * 浮点数 *
--     in : Lens            * integer *             * 需要进行打包的数组下标位数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将浮点数组打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pkra_(Rawbyte : byte512_t;
                  Offset : integer;
                  Val : array of real;
                  Lens : integer;
                  Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_pkdia_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * array of integer *    * 整数 *
--     in : Lens            * integer *             * 需要进行打包的数组下标位数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将整数组打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pkdia_(Rawbyte : byte512_t;
                  Offset : integer;
                  Val : array of integer;
                  Lens : integer;
                  Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_pkia_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--     in : Val             * array of integer *    * 短整数 *
--     in : Lens            * integer *             * 需要进行打包的数组下标位数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将短整数组打包进字节包里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始写入，
-- 在打包结束后，Offset 将返回打包后的偏移值
--***********************************************************	
routine raw_pkia_(Rawbyte : byte512_t;
                 Offset : integer;
                 Val : array of integer;
                 Lens : integer;
                 Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpkr_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * real *                * 浮点数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将浮点数从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpkr_(Rawbyte : byte512_t;
                   Offset : integer;
                   Val : real;
                   Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpkdi_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * integer *             * 整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将整数从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpkdi_(Rawbyte : byte512_t;
                    Offset : integer;
                    Val : integer;
                    Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpki_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * integer *             * 短整数 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将短整数从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpki_(Rawbyte : byte512_t;
                   Offset : integer;
                   Val : integer;
                   Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpks_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * string *              * 字符串 *
--     in : Lens            * integer *             * 需要解包的字符串长度 *
--***********************************************************	
-- 将字符串从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpks_(Rawbyte : byte512_t;
                   Offset : integer;
                   Val : string;
                   Lens : integer) from lib_momory

--***********************************************************
-- func raw_unpkra_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * array of real *       * 浮点数组 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将浮点数组从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpkra_(Rawbyte : byte512_t;
                    Offset : integer;
                    Val : array of real;
                    Lens : integer;
                    Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpkdia_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * array of integer *    * 整数组 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将整数组从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpkdia_(Rawbyte : byte512_t;
                     Offset : integer;
                     Val : array of integer;
                     Lens : integer;
                     Reversed : boolean) from lib_momory

--***********************************************************
-- func raw_unpkia_()
--***********************************************************
--     in : Rawbyte         * byte512_t *           * 字节包 *
--     in : Offset          * integer *             * 偏移值 *
--    out : Val             * array of integer *    * 短整数组 *
--     in : Reversed        * boolean *             * true为大端模式 *
--***********************************************************	
-- 将短整数组从字节包里解包出来赋值到 Val 里，Offset参数代表其实位置
-- 例如 Offset = 0 ，将从第一个字节开始解包，
-- 在解包结束后，Offset 将返回解包后的偏移值
--***********************************************************	
routine raw_unpkia_(Rawbyte : byte512_t;
                    Offset : integer;
                    Val : array of integer;
                    Lens : integer;
                    Reversed : boolean) from lib_momory


routine b_shl_(IntVal : integer;
               Bits : integer) : integer from lib_momory

routine b_shr_(IntVal : integer;
               Bits : integer) : integer from lib_momory
