/***********************************************************

Copyright 2018 - 2023 speedbot All Rights reserved.

file Name: lib_mpmotion.h

Description:
  Language             ==   motoplus for Yaskawa ROBOT
  Date                 ==   2021 - 09 - 03
  Modification Data    ==   2021 - 09 - 18

Author: speedbot

Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--  
*/
#ifndef __SBT_MPMOTION_H__
#define __SBT_MPMOTION_H__

#include "operating_environment.h"

typedef LONG mp_torq_t[MP_GRP_AXES_NUM];

struct pulse_lim_t
{
    LONG SLower;
    LONG SUpper;
    LONG LLower;
    LONG LUpper;
    LONG ULower;
    LONG UUpper;
    LONG RLower;
    LONG RUpper;
    LONG BLower;
    LONG BUpper;
    LONG TLower;
    LONG TUpper;
};

#define PULSE_LIM_GP280L          {-409100, 409100, \
                                   -107638, 215276, \
                                   -287035, 37075,  \
                                   -1158194, 1158194, \
                                   -404312, 404312, \
                                   -489366, 489366}









//***********************************************************
// func current_cartposition_()
//***********************************************************
//  	in : UserFrameNo			* SHORT * 		    * 相对的用户坐标系号 * 
//  	in : UserToolNo			* SHORT * 		    * 相对的工具坐标系号 *
//     out : *CartPosition	    * MP_COORD * 		* 当前直角位置指针 *
//     return : 			* STATUS * 		    * 始终返回 0 *
//***********************************************************
//  获取指定坐标系下机器人当前直角位置
//  UF [0 == 基座坐标] / [1 == 机器人坐标] / [2 - 64 == 用户坐标系 1 - 63]
//  [X Y Z == 0.001mm] / [RX RY RZ == 0.0001°] / [E1 == 0.001mm]
//***********************************************************	
IMPORT STATUS current_cartposition_(IN SHORT UserFrameNo, IN SHORT UserToolNo, OUT MP_COORD *CartPosition);

//***********************************************************
// func current_jntposition_()
//***********************************************************
//     out : *JointPosition			* MP_JOINT * 		* 当前关节位置指针 *
//     return : 			    * STATUS * 		    * 始终返回 0 *
//***********************************************************
// 获取当前机器人关节位置
// [J1 - J6 == 0.0001°] / [J7 == 0.001mm]
//***********************************************************	
IMPORT STATUS current_jntposition_(OUT MP_JOINT *JointPosition);

//***********************************************************
// func current_position_config_()
//***********************************************************
//     return : 			* SHORT * 		* 返回机器人轴配置 *
//***********************************************************
// 获取机器人的轴配置
//***********************************************************	
IMPORT SHORT current_position_config_();

//***********************************************************
// func check_cartposition_()
//***********************************************************
//         in : NeedChkPos  * MP_COORD *    * 需要检查的直角坐标 *  
//         in : UserFrameNo      * SHORT *       * 相对的用户坐标系编号 *  
//         in : UserToolNo       * SHORT *       * 相对的工具坐标系编号 *  
//     return : 			* STATUS * 		* [0 == 可达] / [!0 == 不可达] *
//***********************************************************
// 检测一个直角坐标在指定坐标系下是否可达
//***********************************************************	
IMPORT STATUS check_cartposition_(IN MP_COORD NeedChkPos, IN LONG Coordinate, IN SHORT UserFrameNo, IN SHORT UserToolNo, IN struct pulse_lim_t PulseLim);

//***********************************************************
// func matrix_cartposition_()
//***********************************************************
//         in : CartPosition1        * MP_COORD *        * 坐标1 *  
//         in : CartPosition2        * MP_COORD *        * 坐标2 *  
//        out : *CartPosition3       * MP_COORD *        * 坐标3 *  
//     return : 			* STATUS * 		    * [0 == 成功] / [!0 == 失败] *
//***********************************************************
// 得到 坐标1 与 坐标2 的矩阵乘积并且赋值到 坐标3
// 矩阵乘法
//***********************************************************	
IMPORT STATUS matrix_cartposition_(IN MP_COORD CartPosition1, IN MP_COORD CartPosition2, OUT MP_COORD *CartPosition3);

//***********************************************************
// func inv_cartposition_()
//***********************************************************
//         in : CartPosition1        * MP_COORD *        * 坐标1 *  
//        out : *CartPosition2       * MP_COORD *        * 坐标2 *  
//     return : 			* STATUS * 		    * [0 == 成功] / [!0 == 失败] *
//***********************************************************
// 将 坐标1 的逆矩阵 赋值到 坐标2
// 矩阵转逆
//***********************************************************	
IMPORT STATUS inv_cartposition_(IN MP_COORD CartPosition1, OUT MP_COORD *CartPosition2);

//***********************************************************
// func null_cartposition_()
//***********************************************************
//     return : 			* MP_COORD * 		    * 返回一个 0 坐标 *
//***********************************************************
// 返回一个全是 0 的坐标 [0, 0, 0, 0, 0, 0]
//***********************************************************	
IMPORT MP_COORD null_cartposition_();

//***********************************************************
// func num_robot_axis_()
//***********************************************************
//     return : 			* INT32 * 		    * 机器人的轴数 *
//***********************************************************
// 返回机器人的轴数
// 这个函数只能返回 6 和 7 ，就是一个标准 6 轴机器人带地轨还是不带地轨
// 如果是一个不带地轨的4轴机器人 ， 这个函数还是返回 6
//***********************************************************
IMPORT INT32 num_robot_axis_();

//***********************************************************
// func current_torque_()
//***********************************************************
//        out : *CurTurq        * mp_torq_t *           * 返回轴力矩参数 *  
//     return : 			    * STATUS * 		        * 始终返回 0 *
//***********************************************************
// 获取每个轴的力矩值还是电流值来着
//***********************************************************	
IMPORT STATUS current_torque_(OUT mp_torq_t *CurTurq);

//***********************************************************
// func move_j_()
//***********************************************************
//        in : ThisPoint        * MP_COORD *        * 直角坐标 *
//        in : Speed            * LONG *            * 速度 *
//        in : UserFrameNo           * SHORT *           * 用户坐标系编号 *
//        in : UserToolNo            * SHORT *           * 工具坐标系编号 *
//     return : 			    * STATUS * 		    * 运动状态 *
//***********************************************************
// 关节运动（目标点为直角坐标）
// 运行速度 (1 - 10000 representing 0.01 to 100.0%)
// UF [0 == 基座坐标] / [1 == 机器人坐标] / [2 - 64 == 用户坐标系 1 - 63]
//***********************************************************	
IMPORT STATUS move_j_(IN MP_COORD ThisPoint, IN LONG Speed, IN SHORT UserFrameNo, IN SHORT UserToolNo);

//***********************************************************
// func move_l_()
//***********************************************************
//        in : ThisPoint        * MP_COORD *        * 直角坐标 *
//        in : Speed            * LONG *            * 速度 *
//        in : UserFrameNo           * SHORT *           * 用户坐标系编号 *
//        in : UserToolNo            * SHORT *           * 工具坐标系编号 *
//     return : 			    * STATUS * 		    * 运动状态 *
//***********************************************************
// 直线运动（目标点为直角坐标）
// 运行速度 0.1 ～ S1C*G17（登陆用直线速度）[mm/s] 
//***********************************************************	
IMPORT STATUS move_l_(IN MP_COORD ThisPoint, IN LONG Speed, IN SHORT UserFrameNo, IN SHORT UserToolNo);

//***********************************************************
// func move_abs_j_()
//***********************************************************
//        in : ThisPoint        * MP_COORD *        * 直角坐标 *
//        in : Speed            * LONG *            * 速度 *
//        in : UserToolNo            * SHORT *           * 工具坐标系编号 *
//     return : 			    * STATUS * 		    * 运动状态 *
//***********************************************************
// 绝对关节运动（目标点为关节坐标）
// 运行速度 (1 - 10000 representing 0.01 to 100.0%)
//***********************************************************	
IMPORT STATUS move_abs_j_(IN MP_JOINT ThisPoint, IN LONG Speed, IN SHORT UserToolNo);

//***********************************************************
// func joint_to_pulse_()
//***********************************************************
//        in : GroupNo                * UINT8 *           * 运动组号 *
//        in : *JointData           * LONG *            * 关节数据 *
//       out : *PulseData           * LONG *            * 脉冲数据 *
//     return : 			        * STATUS * 		    * 转换状态 *
//***********************************************************
// 将关节位置 [0.0001 DEG] 转化为脉冲位置
// STATUS == 0 时转换成功
//***********************************************************	
IMPORT STATUS joint_to_pulse_(IN UINT8 GroupNo, IN LONG *JointData, OUT LONG *PulseData);

//***********************************************************
// func pulse_to_joint_()
//***********************************************************
//        in : GroupNo                * UINT8 *           * 运动组号 *
//        in : *PulseData           * LONG *            * 脉冲数据 *
//       out : *JointData           * LONG *            * 关节数据 *
//     return : 			        * STATUS * 		    * 转换状态 *
//***********************************************************
// 将脉冲数据转化为关节数据 [0.0001 DEG]
// STATUS == 0 时转换成功
//***********************************************************	
IMPORT STATUS pulse_to_joint_(IN UINT8 GroupNo, IN LONG *PulseData, OUT LONG *JointData);

//***********************************************************
// func joint_to_cartposition_()
//***********************************************************
//        in : GroupNo                * UINT8 *           * 运动组号 *
//        in : *JointData           * LONG *            * 关节数据 *
//       out : *ConfigData          * BITSTRING *       * 机器人轴配置信息 *
//       out : *CartData            * LONG *            * 直角坐标数据 *
//     return : 			        * STATUS * 		    * 转换状态 *
//***********************************************************
// 将关节数据 [0.0001 DEG] 转换为直角坐标数据 [0.001 MM / 0.0001 DEG]
// STATUS == 0 时转换成功
//***********************************************************	
IMPORT STATUS joint_to_cartposition_(IN UINT8 GroupNo, IN LONG *JointData, OUT BITSTRING *ConfigData, OUT LONG *CartData);

//***********************************************************
// func cartposition_to_joint_()
//***********************************************************
//        in : GroupNo                * UINT8 *           * 运动组号 *
//        in : *CartData            * BITSTRING *       * 直角坐标数据 *
//        in : *ConfigData          * SHORT *           * 机器人轴配置信息 *
//       out : *JointData           * LONG *            * 关节数据 *
//     return : 			        * STATUS * 		    * 转换状态 *
//***********************************************************
// 将直角坐标数据 [0.001 MM / 0.0001 DEG] 转换为关节坐标数据 [0.0001 DEG]
// STATUS == 0 时转换成功
//***********************************************************	
IMPORT STATUS cartposition_to_joint_(IN UINT8 GroupNo, IN LONG *CartData, IN BITSTRING ConfigData, OUT LONG *JointData);

#endif