program lib_inst
--***********************************************************
--
-- file Name: lib_inst
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2025 - 04 - 29
--   Modification Data    ==   2025 - 05 - 06
--
-- Author: 
--
-- Version: 1.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
-- 2025 - 05 - 06 ++ f000_it00_() 
--
-- 2025 - 05 - 06 ++ f001_it01_() 
--
-- 2025 - 05 - 06 ++ f002_it01_() 
--
-- 2025 - 05 - 06 ++ f003_it01_()
--
-- 2025 - 05 - 06 ++ f004_it01_()
--
-- 2025 - 09 - 06 ++ f011_it01_()
--
-- 2025 - 09 - 06 ++ f012_it01_()
--
-- 2025 - 09 - 06 ++ f013_it01_()
--
-- 2025 - 09 - 06 ++ f013_it02_()
--
%comment = 'Inst 250429'
%nolockgroup
%nobusylamp
%nopause = error + command + tpenable

%include klevtpe
%include include/lib_busio_t
%include include/lib_buscmd_t
%include include/lib_packages_t
%include include/lib_tpe_t
%include include/lib_socket_t
%include include/lib_transform_t
%include include/lib_math_t
%include include/lib_inst_t
%include include/lib_logs_t
var 
    FileVar                     : file 
    InstSendHead                : pack_head_t
    InstReadHead                : pack_head_t
    InstSendBody                : busout_t
    InstReadBody                : busin_t
    InstSendTail                : pack_tail_t
    InstReadTail                : pack_tail_t

%include include/lib_packages_h
%include include/lib_socket_h
%include include/lib_tpe_h
%include include/lib_motion_h
%include include/lib_tp_if_h
%include include/lib_inst_h
%include include/lib_math_h
begin 

end lib_inst

routine f000_it00_
var
    Ack                         : integer 
    Status                      : integer
begin
    Ack                         = 0
    InstSendHead.Head           = PACK_HEADER
    InstSendHead.Length         = 24
    InstSendHead.PacketCount    = 1
    InstSendHead.Cmd            = 253
    InstSendHead.Type_          = TYPE_FANUC
    InstSendHead.Seq            = 1
    InstSendHead.VirtualRob     = bol_to_int_(is_vir_rob_)      --判断机器人是否为真实机器人，真实机器人为0，仿真机器人为1       
    InstSendTail                = PACK_TAIL

    ThisSocket.Connected        = false                 -- 设置 CtrlSock 连接状态为 false
    ThisSocket.NByte            = 0                     -- 设置 CtrlSock 的字节数
    ThisSocket.AtrTimeout       = 0                     -- 设置 CtrlSock 的超时属性
    ThisSocket.AtrBinary        = true                  -- 设置 CtrlSock 的二进制传输属性
    ThisSocket.AtrIntAct        = false                 -- 设置 CtrlSock 的中断激活属性

    repeat  
        delay(100)                         
        tcp_close_(ThisSocket, FileVar)            
        Status = tcp_connect_(ThisSocket, FileVar)    
    until(Status = OK)

    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    write FileVar(Ack)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status) 
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    read FileVar(Ack)
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    return(Status) 
end f000_it00_

routine f001_it01_
var
    TempInt                     : integer 
    Status                      : integer 
    SendCmdTyp07                : cmd_typ07_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 80
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 1
    InstSendBody.JobId          = 0
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 17

    SendCmdTyp07.Float01 = PosData.x
    SendCmdTyp07.Float02 = PosData.y
    SendCmdTyp07.Float03 = PosData.z
    SendCmdTyp07.Float04 = PosData.w
    SendCmdTyp07.Float05 = PosData.p
    SendCmdTyp07.Float06 = PosData.r
    SendCmdTyp07.Float07 = PosData.ext1
    SendCmdTyp07.Float08 = PosData.ext2
    SendCmdTyp07.Float09 = PosData.ext3

    SendCmdTyp07.Float10 = 0.0
    SendCmdTyp07.Float11 = 0.0
    SendCmdTyp07.Float12 = 0.0
    SendCmdTyp07.Int13   = CameraId
    SendCmdTyp07.Int14   = CaptureId
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd017_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp07)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif 

    return(InstReadBody.ErrorId)
end f001_it01_

routine f002_it01_
var
    Status                      : integer 
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp01                : cmd_typ01_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 2
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = PlanningId  
    SendCmdTyp01.Byte02         = 0 
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = 0.0
    SendCmdTyp01.Float08        = 0.0
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    if Status <> OK then  
        return(Status)
    endif 
    if InstReadBody.ErrorId = 0 then 
        Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp01)
        if Status <> OK then  
            return(Status)
        endif 
        NumOfPath = ReadCmdTyp01.Byte01
    endif 
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif
    
    return(InstReadBody.ErrorId)
end f002_it01_

routine f003_it01_
var
    Status                      : integer 
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp08                : cmd_typ08_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 3
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = PathId  
    SendCmdTyp01.Byte02         = 0 
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = 0.0
    SendCmdTyp01.Float08        = 0.0
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    if Status <> OK then  
        return(Status)
    endif
    if InstReadBody.ErrorId = 0 then 
        Status = pack_cmd148_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp08)
        if Status <> OK then  
            return(Status)
        endif
        GrindHeadId = ReadCmdTyp08.Byte01
        GrindSpeed  = ReadCmdTyp08.Float13
    endif
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif

    return(InstReadBody.ErrorId)
end f003_it01_

routine f004_it01_
var
    I                           : integer 
    TpeOpenId                   : integer 
    TpeLen                      : integer 
    Status                      : integer 
    AxisPos                     : jointpos
    AxisAry9	                : array[9] of real
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp07                : cmd_typ07_t
begin
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 4
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = PointType  
    SendCmdTyp01.Byte02         = PathId
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = StepDistance
    SendCmdTyp01.Float08        = 0.0

    TpeLen = 0
    TpeOpenId = tpe_open_(TpeProgram, TPE_RWACC, TPE_NOREJ)
    if TpeOpenId <= 0 then 
        post_err(CC_UALARM, '路径程序打开错误', 0, CC_ABORT)
    endif
    tpe_del_ln_(TpeOpenId, TPE_ALL_LINE)

    repeat
        InstSendHead.Seq = InstSendHead.Seq + 1
        if InstSendHead.Seq > 255 then 
            InstSendHead.Seq = 1
        endif

        Status = spack_head_(ThisSocket, FileVar, InstSendHead)
        Status = spack_body_(ThisSocket, FileVar, InstSendBody)
        Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
        Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
        if Status <> OK then  
            return(Status)
        endif 

        Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
        Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)  
        if Status <> OK then 
            return(Status)
        endif     

        if InstReadBody.ErrorId = 0 then 
            for I = 1 to InstReadHead.PacketCount do  
                Status = pack_cmd132_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp07)
                if Status <> OK then 
                    return(Status)
                endif 
                
                AxisAry9[1] = ReadCmdTyp07.Float01 
                AxisAry9[2] = ReadCmdTyp07.Float02
                AxisAry9[3] = ReadCmdTyp07.Float03
                AxisAry9[4] = ReadCmdTyp07.Float04
                AxisAry9[5] = ReadCmdTyp07.Float05
                AxisAry9[6] = ReadCmdTyp07.Float06
                AxisAry9[7] = ReadCmdTyp07.Float07
                AxisAry9[8] = ReadCmdTyp07.Float08
                AxisAry9[9] = ReadCmdTyp07.Float09 
                AxisPos = trans_axis_(AxisAry9)

                if SpeedEnable = true then 
                    InstMove.Speed = ReadCmdTyp07.Int13
                endif 

                if InstMove.MovType = LM_MTN_JNT then 
                    InstMove.Speed = round((InstMove.Speed / 12000) * 100)
                endif 

                if (I = InstReadHead.PacketCount) and (InstReadHead.Type_ = 1) then 
                    InstMove.Cnt = 0
                else 
                    InstMove.Cnt = 100
                endif

                tpe_it_mov_(TpeOpenId, InstMove, TpeLen)
                tpe_s_jpos_(TpeOpenId, 1, (InstMove.PointNo), AxisPos)

                InstMove.PointNo = InstMove.PointNo + 1
            endfor 
        endif

        Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
        if Status <> OK then 
            return(Status)
        endif 
    until(InstReadHead.Type_ = 1)   

    tpe_close_(TpeOpenId)

    return(InstReadBody.ErrorId)
end f004_it01_

routine f011_it01_
var
    Status                      : integer 
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp01                : cmd_typ01_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 12
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = PlanningId  
    SendCmdTyp01.Byte02         = 0 
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = 0.0
    SendCmdTyp01.Float08        = 0.0
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    if Status <> OK then  
        return(Status)
    endif 
    if InstReadBody.ErrorId = 0 then 
        Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp01)
        if Status <> OK then  
            return(Status)
        endif 
        NumOfPath = ReadCmdTyp01.Byte01
    endif 
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif
    
    return(InstReadBody.ErrorId)
end f011_it01_

routine f012_it01_
var
    I                           : integer 
    TpeOpenId                   : integer 
    TpeLen                      : integer 
    Status                      : integer 
    AxisPos                     : jointpos
    AxisAry9	                : array[9] of real
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp07                : cmd_typ07_t
begin
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 13
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = PointType  
    SendCmdTyp01.Byte02         = PathId
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = StepDistance
    SendCmdTyp01.Float08        = 0.0

    TpeLen = 0
    TpeOpenId = tpe_open_(TpeProgram, TPE_RWACC, TPE_NOREJ)
    if TpeOpenId <= 0 then 
        post_err(CC_UALARM, '路径程序打开错误', 0, CC_ABORT)
    endif
    tpe_del_ln_(TpeOpenId, TPE_ALL_LINE)

    repeat
        InstSendHead.Seq = InstSendHead.Seq + 1
        if InstSendHead.Seq > 255 then 
            InstSendHead.Seq = 1
        endif

        Status = spack_head_(ThisSocket, FileVar, InstSendHead)
        Status = spack_body_(ThisSocket, FileVar, InstSendBody)
        Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
        Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
        if Status <> OK then  
            return(Status)
        endif 

        Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
        Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)  
        if Status <> OK then 
            return(Status)
        endif     

        if InstReadBody.ErrorId = 0 then 
            for I = 1 to InstReadHead.PacketCount do  
                Status = pack_cmd132_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp07)
                if Status <> OK then 
                    return(Status)
                endif 
                
                AxisAry9[1] = ReadCmdTyp07.Float01 
                AxisAry9[2] = ReadCmdTyp07.Float02
                AxisAry9[3] = ReadCmdTyp07.Float03
                AxisAry9[4] = ReadCmdTyp07.Float04
                AxisAry9[5] = ReadCmdTyp07.Float05
                AxisAry9[6] = ReadCmdTyp07.Float06
                AxisAry9[7] = ReadCmdTyp07.Float07
                AxisAry9[8] = ReadCmdTyp07.Float08
                AxisAry9[9] = ReadCmdTyp07.Float09 
                AxisPos = trans_axis_(AxisAry9)

                if SpeedEnable = true then 
                    InstMove.Speed = ReadCmdTyp07.Int13
                endif 

                if InstMove.MovType = LM_MTN_JNT then 
                    InstMove.Speed = round((InstMove.Speed / 12000) * 100)
                endif 

                if (InstReadHead.Type_ = 1) or (ReadCmdTyp07.Int14 <> 0) then 
                    InstMove .Cnt = 0
                else 
                    InstMove.Cnt = 100
                endif 

                tpe_it_mov_(TpeOpenId, InstMove, TpeLen)
                tpe_s_jpos_(TpeOpenId, 1, (InstMove.PointNo), AxisPos)

                if (ReadCmdTyp07.Int14 <> 0) and not(uninit(InstProg.Name)) then 
                    tpe_it_call_(TpeOpenId, InstProg, TpeLen)
                endif 

                InstMove.PointNo = InstMove.PointNo + 1
            endfor 
        endif

        Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
        if Status <> OK then 
            return(Status)
        endif 
    until(InstReadHead.Type_ = 1)   

    tpe_close_(TpeOpenId)

    return(InstReadBody.ErrorId)
end f012_it01_

routine f013_it01_
var
    Status                      : integer 
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp01                : cmd_typ01_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 15
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 21

    SendCmdTyp01.Byte01         = FunctionId  
    SendCmdTyp01.Byte02         = 0 
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = 0.0
    SendCmdTyp01.Float08        = 0.0
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    if Status <> OK then  
        return(Status)
    endif 
    if InstReadBody.ErrorId = 0 then 
        Status = pack_cmd021_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp01)
        if Status <> OK then  
            return(Status)
        endif 
        FunctionFeed = ReadCmdTyp01.Byte01
    endif 
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif
    
    return(InstReadBody.ErrorId)
end f013_it01_

routine f013_it02_
var
    Status                      : integer 
    SendCmdTyp01                : cmd_typ01_t
    ReadCmdTyp01                : cmd_typ01_t
begin
    InstSendHead.Seq = InstSendHead.Seq + 1
    if InstSendHead.Seq > 255 then 
        InstSendHead.Seq = 1
    endif
    InstSendHead.Length         = 50
    InstSendHead.Cmd            = 64
    InstSendHead.Type_          = 1

    InstSendBody.RobotId        = 15
    InstSendBody.JobId          = JobId
    InstSendBody.ProtocolId     = 0
    InstSendBody.RobMsgType     = 145

    SendCmdTyp01.Byte01         = ToolUpdType  
    SendCmdTyp01.Byte02         = CurTool 
    SendCmdTyp01.Short03        = 0  
    SendCmdTyp01.Short04        = 0
    SendCmdTyp01.Int05          = 0
    SendCmdTyp01.Int06          = 0
    SendCmdTyp01.Float07        = 0.0
    SendCmdTyp01.Float08        = 0.0
    
    Status = spack_head_(ThisSocket, FileVar, InstSendHead)
    Status = spack_body_(ThisSocket, FileVar, InstSendBody)
    Status = pack_cmd145_(ThisSocket, FileVar, PACKCMD_WRIT, SendCmdTyp01)
    Status = spack_tail_(ThisSocket, FileVar, InstSendTail)
    if Status <> OK then  
        return(Status)
    endif 

    Status = rpack_head_(ThisSocket, FileVar,  InstReadHead)
    Status = rpack_body_(ThisSocket, FileVar,  InstReadBody)
    if Status <> OK then  
        return(Status)
    endif 
    if InstReadBody.ErrorId = 0 then 
        Status = pack_cmd145_(ThisSocket, FileVar, PACKCMD_READ, ReadCmdTyp01)
        if Status <> OK then  
            return(Status)
        endif 
        ToolUpdFlag = ReadCmdTyp01.Byte01
        ToolUpdNo = ReadCmdTyp01.Byte02
    endif 
    Status = rpack_tail_(ThisSocket, FileVar,  InstReadTail)
    if Status <> OK then  
        return(Status)
    endif
    
    return(InstReadBody.ErrorId)
end f013_it02_