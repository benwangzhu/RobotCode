--***********************************************************
--
-- Copyright 2018 - 2023 speedbot All Rights reserved.
--
-- file Name: lib_socket_h
--
-- Description:
--   Language             ==   Karel for FANUC ROBOT
--   Date                 ==   2021 - 08 - 16
--   Modification Data    ==   2021 - 09 - 17
--
-- Author: speedbot
--
-- Version: 2.0
--*********************************************************************************************************--
--                                                                                                         --
--                                                      .^^^                                               --
--                                               .,~<c+{{{{{{t,                                            -- 
--                                       `^,"!t{{{{{{{{{{{{{{{{+,                                          --
--                                 .:"c+{{{{{{{{{{{{{{{{{{{{{{{{{+,                                        --
--                                "{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{~                                       --
--                               ^{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{!.  `^                                    --
--                               c{{{{{{{{{{{{{c~,^`  `.^:<+{{{!.  `<{{+,                                  --
--                              ^{{{{{{{{{{{!^              `,.  `<{{{{{{+:                                --
--                              t{{{{{{{{{!`                    ~{{{{{{{{{{+,                              --
--                             ,{{{{{{{{{:      ,uDWMMH^        `c{{{{{{{{{{{~                             --
--                             +{{{{{{{{:     ,XMMMMMMw           t{{{{{{{{{{t                             --
--                            ,{{{{{{{{t     :MMMMMMMMM"          ^{{{{{{{{{{~                             --
--                            +{{{{{{{{~     8MMMMMMMMMMWD8##      {{{{{{{{{+                              --
--                           :{{{{{{{{{~     8MMMMMMMMMMMMMMH      {{{{{{{{{~                              --
--                           +{{{{{{{{{c     :MMMMMMMMMMMMMMc     ^{{{{{{{{+                               --
--                          ^{{{{{{{{{{{,     ,%MMMMMMMMMMH"      c{{{{{{{{:                               --
--                          `+{{{{{{{{{{{^      :uDWMMMX0"       !{{{{{{{{+                                --
--                           `c{{{{{{{{{{{"                    ^t{{{{{{{{{,                                --
--                             ^c{{{{{{{{{{{".               ,c{{{{{{{{{{t                                 --
--                               ^c{{{{{{{{{{{+<,^`     .^~c{{{{{{{{{{{{{,                                 --
--                                 ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t                                  --
--                                   ^c{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{{t`                                  --
--                                     ^c{{{{{{{{{{{{{{{{{{{{{{{{{{+c"^                                    --                         
--                                       ^c{{{{{{{{{{{{{{{{{+!":^.                                         --
--                                         ^!{{{{{{{{t!",^`                                                --
--                                                                                                         --
--*********************************************************************************************************--
--
--***********************************************************
-- func sock_ping_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- Ping 接口参数中使用的Ip地址是否能成功
--***********************************************************
routine sock_ping_(ThisSock : sock_cfg_t) : integer from lib_socket

--***********************************************************
-- func sock_accept_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- 创建一个 SOCKET 服务器进行监听
-- 在成功被连接后，需进行 OPEN FILE 操作，才能进行数据传输
-- 在 sock_cfg_t 参数中
-- Host 代表服务器 BIND 的 IP 地址，此参数未初始化时，默认 BIND 本机 IP地址
-- ServerPort 代表服务器 BING 的端口号，建议使用 20000 以上的值
--***********************************************************
routine sock_accept_(ThisSock : sock_cfg_t) : integer from lib_socket

--***********************************************************
-- func csock_conn_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- 创建一个 SOCKET 并进行连接服务器
-- 在成功连接后，需进行 OPEN FILE 操作，才能进行数据传输
-- 在 sock_cfg_t 参数中
-- Host 代表需要连接 的 IP 地址
-- ServerPort 代表需要连接 的端口号
--***********************************************************
routine csock_conn_(ThisSock : sock_cfg_t) : integer from lib_socket

--***********************************************************
-- func sock_dconn_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--***********************************************************
-- SOCKET断开连接
-- 可以断开客户端连接，也可以断开服务器连接
--***********************************************************
routine sock_dconn_(ThisSock : sock_cfg_t) from lib_socket

--***********************************************************
-- func file_init_()
--***********************************************************
--		in : Filevar			* file *			* 需要初始化的 FILE 变量 *
--		in : ThisSock			* sock_cfg_t *		* SOCKET接口参数 *
--***********************************************************
-- 初始化SOCKET的读写机制，超时时间等
-- 在 OPEN FILE 前使用
-- 在 sock_cfg_t 参数中
-- Connected 代表连接状态，FALSE为未连接，TRUE为连接
-- Host 作为服务器时，代表需要 BIND 的IP地址，作为客户端时，代表需要进行连接的 IP 地址
-- PortTag "Sn:"代表服务器， "Cn:"代表客户端
-- ServerPort 作为服务器时代表需要 BING 的端口号， 作为客户端时代表需要连接的端口号
-- NByte 可以进行读操作的字节数
-- AtrTimeout 读操作时的超时时间，设置为 0 时代表永久阻塞，单位时 ms
-- AtrBinary TRUE 代表二进制传输， FALSE 代表 ASCII 传输
-- AtrIntAct TRUE 代表实时交互， FALSE 时，当指定 CR 时或缓存区满时才进行输出
-- AtrProbably FALSE 时， 将输出的字节大小端进行交换
-- 注意在 ROBOGUIDE 中和实际机器人中，大小端是相反的
--***********************************************************
routine file_init_(Filevar : file;
                   ThisSock : sock_cfg_t) from lib_socket

--***********************************************************
-- func file_ofd_()
--***********************************************************
--		in : Filevar			* file *		 * 需要绑定的FILE变量 *
--		in : ThisSock			* sock_cfg_t *	 * SOCKET接口参数 *
--	return : 					* integer *		 * 不为0则失败 *
--***********************************************************
-- 将 SOCKET 绑定 FILE 变量
-- 在成功被链接或者链接时使用，以进行后续的通讯读写操作
-- 在调用此函数之前，一般需要进行 file_init_ 操作
--***********************************************************
routine file_ofd_(Filevar : file;
                  ThisSock : sock_cfg_t) : integer from lib_socket

--***********************************************************
-- func file_cfd_()
--***********************************************************
--		in : Filevar			* file *	* 需要解绑的FILE变量 *
--***********************************************************
-- FILE 变量与SOCKET解绑
-- 注意在结束读取操作时或者关闭通讯链接时，一定要进行此操作
-- 在程序终止后也会自动执行此操作
--***********************************************************
routine file_cfd_(Filevar : file) from lib_socket

--***********************************************************
-- func get_bits_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	   out : ThisSock 			* sock_cfg_t *	* 返回的字节数量， 小于 0 则失败
--***********************************************************
-- 获取socket缓存区中的字节数量
-- 在通讯连接时，可用此函数检查接收缓存区里存在未读取的字节数量
-- 当返回一个小于 0 的数时，代表通讯已经端开
--***********************************************************
routine get_bits_(Filevar : file;
                  ThisSock : sock_cfg_t) : integer from lib_socket

--***********************************************************
-- func sock_write_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--		in : Msg				* string *		* 需要发送的消息 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- SOCKET发送
-- 将一组字符串数据发送出去
--***********************************************************
routine sock_write_(Filevar: file;
                    Msg : string) : integer from lib_socket

--***********************************************************
-- func sock_send_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Msg				* string *		* 需要发送的消息 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- SOCKET发送
-- 将一组字符串数据发送出去
--***********************************************************
routine sock_send_(ThisSock : sock_cfg_t;
                   Filevar: file;
                   Msg : string) : integer from lib_socket

--***********************************************************
-- func sock_read_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	   out : Msg				* string *		* 存储接收的消息 *
--	return : 					* integer *		* >0 代表成功读取出数据 *
--***********************************************************
-- SOCKET发送
-- 从接收缓存区读取一组数据，当指定超时时间为 0 时，将永久阻塞，直到有错误发生或者有数据输入
-- 最大一次接收 126 字节的数据
--***********************************************************
routine sock_read_(ThisSock : sock_cfg_t;
                   Filevar: file;
                   Msg : string) : integer from lib_socket

--***********************************************************
-- func sock_rjson_()
--***********************************************************
--		in : Filevar			* file *					* 与 SOCKET 绑定的 FILE 变量 *
--     OUT : IntData      		* array[*] of integer *		* 返回的整型数组 *
--     OUT : FloatData    		* array[*] of real *		* 返回的浮点型数组 *
--     OUT : stringData    		* array[*] of string *		* 返回的字符串数组 *
--     OUT : PosData     		* array[*] of des_coord_t * * 返回的坐标数组 *
--	return : 					* integer *
--***********************************************************
-- 以 JSON 格式从SOCKET缓存中读取数据
-- 此方式最大读取出一共 30 组解析好的数据
--***********************************************************
routine sock_rjson_(Filevar : file;
                    IntData : array[*] of integer
                    FloatData : array[*] of real
                    stringData : array[*] of string
                    PosData : array[*] of des_coord_t) : integer from lib_socket

--***********************************************************
-- func sock_rjson2_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Filevar			* file *					* 与 SOCKET 绑定的 FILE 变量 *
--     OUT : IntData      		* array[*] of integer *		* 返回的整型数组 *
--     OUT : FloatData    		* array[*] of real *		* 返回的浮点型数组 *
--     OUT : stringData    		* array[*] of string *		* 返回的字符串数组 *
--     OUT : PosData     		* array[*] of des_coord_t * * 返回的坐标数组 *
--	return : 					* integer *
--***********************************************************
-- 以 JSON 格式从SOCKET缓存中读取数据
-- 此方式最大读取出一共 30 组解析好的数据
--***********************************************************
routine sock_rjson2_(ThisSock : sock_cfg_t;
                     Filevar : file;
                     IntData : array[*] of integer
                     FloatData : array[*] of real
                     stringData : array[*] of string
                     PosData : array[*] of des_coord_t) : integer from lib_socket

--***********************************************************
-- func tcp_connect_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- 连接到 TCP 服务端，成功连接后绑定 FILE 变量
-- csock_conn_ 和 file_init_ 和 file_ofd_ 的组合函数，可以简化程序
--***********************************************************
routine tcp_connect_(ThisSock : sock_cfg_t;
                     ThisFile : file) : integer from lib_socket

--***********************************************************
-- func tcp_accept_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- 创建一个 TCP 服务端，成功被连接后绑定 FILE 变量
-- sock_accept_ 和 file_init_ 和 file_ofd_ 的组合函数，可以简化程序
--***********************************************************
routine tcp_accept_(ThisSock : sock_cfg_t;
                    ThisFile : file) : integer from lib_socket

--***********************************************************
-- func tcp_close_()
--***********************************************************
--		in : ThisSock			* sock_cfg_t *	* SOCKET接口参数 *
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- 关闭已经绑定的 FILE 变量，并且关闭 TCP 连接
-- file_cfd_ 和 sock_dconn_ 的组合函数，可以简化程序
--***********************************************************
routine tcp_close_(ThisSock : sock_cfg_t;
                   ThisFile : file) from lib_socket 
--***********************************************************
-- func udp_create_()
--***********************************************************
--		in : ThisUdp			* udp_cfg_t *	* UDP 接口变量 *
--      in : ThisFile      		* file *		* 需要与 UDP 绑定的 FILE 变量 *
--	return : 					* integer *     * 返回 0 才是成功 *
--***********************************************************
-- 创建一个 UDP 客户端或者服务端，并且绑定数据传输用的 FILE 变量
-- 在运行此函数时，如果程序阻塞在此函数中， 需对机器人进行冷启动
-- 在 udp_cfg_t 参数中
-- Host 作为服务器时，代表需要 BIND 的IP地址，作为客户端时，代表需要进行通讯的 IP 地址
-- PortTag "Sn:"代表服务器， "Cn:"代表客户端
-- Port 作为服务器时代表需要 BING 的端口号， 作为客户端时代表需要通讯的端口号
-- NByte 可以进行读操作的字节数
-- AtrTimeout 读操作时的超时时间，设置为 0 时代表永久阻塞，单位时 ms
-- AtrBinary TRUE 代表二进制传输， FALSE 代表 ASCII 传输
-- AtrIntAct TRUE 代表实时交互， FALSE 时，当指定 CR 时或缓存区满时才进行输出
-- AtrProbably FALSE 时， 将输出的字节大小端进行交换
-- 注意在 ROBOGUIDE 中和实际机器人中，大小端是相反的
--***********************************************************
routine udp_create_(ThisUdp : udp_cfg_t;
                    ThisFile : file) : integer from lib_socket

--***********************************************************
-- func udp_close_()
--***********************************************************
--		in : ThisUdp			* udp_cfg_t *	* UDP 接口变量 *
--      in : ThisFile      		* file *		* 需要与 UDP 绑定的 FILE 变量 *
--***********************************************************
-- 关闭通讯用的 FILE 变量 ，并且关闭 UDP 通道
--***********************************************************
routine udp_close_(ThisUdp : udp_cfg_t;
                   ThisFile : file) from lib_socket


--***********************************************************
-- func udp_bits_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	   out : ThisUdp 			* udp_cfg_t *	* 返回的字节数量， 小于 0 则失败 * 
--***********************************************************
-- 获取socket缓存区中的字节数量
-- 此函数在 UDP 通讯中使用
-- 注意 当返回的字节数 为 1 时，不一定代表缓存区中有 1 个字节的数据，有可能是对方关闭了此 UDP 通道
--***********************************************************
routine udp_bits_(Filevar : file;
                  ThisUdp : udp_cfg_t) : integer from lib_socket

--***********************************************************
-- func udp_sendto_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--		in : Msg				* string *		* 需要发送的消息 *
--	return : 					* integer *		* 不为0则失败 *
--***********************************************************
-- SOCKET发送
-- 此函数在 UDP 通讯时使用
--***********************************************************
routine udp_sendto_(Filevar: file;
                    Msg : string) : integer from lib_socket


--***********************************************************
-- func udp_recvfm_()
--***********************************************************
--		in : ThisUdp			* udp_cfg_t *	* UDP 接口变量 *
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	   out : Msg				* string *		* 存储接收的消息 *
--	return : 					* integer *		* >0 代表成功读取出数据 *
--***********************************************************
-- SOCKET发送
-- 此函数在 UDP 通讯时使用
-- 只支持一次性读取出 2 - 126 个字节的数据
--***********************************************************
routine udp_recvfm_(ThisUdp : udp_cfg_t;
                    Filevar: file;
                    Msg : string) : integer from lib_socket


-- 以下函数在二进制通讯中使用


--routine tcp_sraw_(ThisSock : sock_cfg_t;
                  --Filevar: file;



--***********************************************************
-- func to_int_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--      in : IntVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 INTEGER 型数据
--***********************************************************
routine to_int_(Filevar : file;
                IntVal : integer) : integer from lib_socket

--***********************************************************
-- func to_byte_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--      in : ByteVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 BYTE 型数据
--***********************************************************
routine to_byte_(Filevar : file;
                 ByteVal : integer) : integer from lib_socket

--***********************************************************
-- func to_short_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--      in : ShortVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 SHORT 型数据
--***********************************************************
routine to_short_(Filevar : file;
                  ShortVal : integer) : integer from lib_socket

--***********************************************************
-- func to_real_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--      in : RelVal      		* real *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 REAL 型数据
--***********************************************************
routine to_real_(Filevar : file;
                 RelVal : real) : integer from lib_socket

--***********************************************************
-- func to_str_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--      in : StrVal      		* sting *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 STRING 型数据
--***********************************************************
routine to_str_(Filevar : file;
                StrVal : string;
                NumBits : integer) : integer from lib_socket

--***********************************************************
-- func to_struct_()
--***********************************************************
--		in : Filevar			* file *		    * 与 SOCKET 绑定的 FILE 变量 *
--      in : StructVal      	* user_path_t *		*  *
--	return : 					* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 结构 型数据
-- 这个结构型数据在头文件中已经声明，只能传输这种结构数据
--***********************************************************
routine to_struct_(Filevar : file;
                   StructVal : user_path_t) : integer from lib_socket

--***********************************************************
-- func to_aryint_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : IntVal			* array of integer *    * INTEGER 数组 *
--		in : Lens			* integer *		        * 长度 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 INTEGER 数组型数据
--***********************************************************
routine to_aryint_(Filevar : file;
                   IntVal : array of integer;
                   Lens : integer) : integer from lib_socket

--***********************************************************
-- func to_arybyte_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : ByteVal	    * array of byte *       * BYTE 数组 *
--		in : Lens			* integer *		        * 长度 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 BYTE 数组型数据
--***********************************************************
routine to_arybyte_(Filevar : file;
                    ByteVal : array of byte;
                    Lens : integer) : integer from lib_socket

--***********************************************************
-- func to_aryshort_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : ShortVal	    * array of short *      * SHORT 数组 *
--		in : Lens			* integer *		        * 长度 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 SHORT 数组型数据
--***********************************************************
routine to_aryshort_(Filevar : file;
                     ShortVal : array of short;
                     Lens : integer) : integer from lib_socket

--***********************************************************
-- func to_aryreal_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : RealVal	    * array of real *       * REAL 数组 *
--		in : Lens			* integer *		        * 长度 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 向 文件变量中存储 REAL 数组型数据
--***********************************************************
routine to_aryreal_(Filevar : file;
                    RealVal : array of real;
                    Lens : integer) : integer from lib_socket

--***********************************************************
-- func to_buffer_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--	return : 					* integer *
--***********************************************************
-- 把缓冲中在文件变量中的数据一次性发送出去
--***********************************************************
routine to_buffer_(Filevar : file) : integer from lib_socket

--***********************************************************
-- func from_int_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--     out : IntVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 INTEGER 型数据
--***********************************************************
routine from_int_(Filevar : file;
                  IntVal : integer) : integer from lib_socket

--***********************************************************
-- func from_byte_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--     out : ByteVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 BYTE 型数据
--***********************************************************
routine from_byte_(Filevar : file;
                   ByteVal : integer) : integer from lib_socket

--***********************************************************
-- func from_short_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--     out : ShortVal      		* integer *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 SHORT 型数据
--***********************************************************
routine from_short_(Filevar : file;
                    ShortVal : integer) : integer from lib_socket

--***********************************************************
-- func from_real_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--     out : RelVal      		* real *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 REAL 型数据
--***********************************************************
routine from_real_(Filevar : file;
                   RelVal : real) : integer from lib_socket

--***********************************************************
-- func from_str_()
--***********************************************************
--		in : Filevar			* file *		* 与 SOCKET 绑定的 FILE 变量 *
--     out : StrVal      		* string *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 STRING 型数据
--***********************************************************
routine from_str_(Filevar : file;
                  NumBits : integer;
                  StrVal : string) : integer from lib_socket

--***********************************************************
-- func from_struct_()
--***********************************************************
--		in : Filevar			* file *		    * 与 SOCKET 绑定的 FILE 变量 *
--     out : StructVal      	* user_path_t *		*  *
--	return : 					* integer *
--***********************************************************
-- 从接收缓冲中读取一个 结构 型数据
-- 这个结构型数据在头文件中已经声明，只能传输这种结构数据，并且字节要与这个数据对应上
--***********************************************************
routine from_struct_(Filevar : file;
                     StructVal : user_path_t) : integer from lib_socket

--***********************************************************
-- func fm_aryint_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : Lens			* integer *		        * 长度 *
--	   out : IntVal	        * array of integer *    * INTEGER 数组 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 从 文件变量中接收 INTEGER 数组型数据
--***********************************************************
routine fm_aryint_(Filevar : file;
                   Lens : integer;
                   IntVal : array of integer) : integer from lib_socket

--***********************************************************
-- func fm_arybyte_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : Lens			* integer *		        * 长度 *
--	   out : ByteVal	    * array of byte *       * BYTE 数组 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 从 文件变量中接收 BYTE 数组型数据
--***********************************************************
routine fm_arybyte_(Filevar : file;
                    Lens : integer;
                    ByteVal : array of byte) : integer from lib_socket

--***********************************************************
-- func fm_aryshort_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : Lens			* integer *		        * 长度 *
--	   out : ShortVal	    * array of short *      * SHORT 数组 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 从 文件变量中接收 SHORT 数组型数据
--***********************************************************
routine fm_aryshort_(Filevar : file;
                     Lens : integer;
                     ShortVal : array of short) : integer from lib_socket

--***********************************************************
-- func fm_aryreal_()
--***********************************************************
--		in : Filevar	    * file *		        * 与 SOCKET 绑定的 FILE 变量 *
--		in : Lens			* integer *		        * 长度 *
--	   out : RealVal	    * array of real *       * REAL 数组 *
--	return : 				* integer *
--***********************************************************
-- 以 二进制 从 文件变量中接收 REAL 数组型数据
--***********************************************************
routine fm_aryreal_(Filevar : file;
                    Lens : integer;
                    RealVal : array of real) : integer from lib_socket
